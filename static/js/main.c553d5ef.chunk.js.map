{"version":3,"sources":["components/common/containers/TabPanel/TabPanel.js","components/common/icons/SitemapOutline/SitemapOutline.js","utils/redux_utils.js","utils/web_utils.js","flux/state/user_interface/config.js","flux/initialState.js","flux/state/user_interface/dragState/config.js","flux/state/user_interface/dragState/dragState.js","flux/state/user_interface/sidePanel/config.js","flux/state/user_interface/sidePanel/sidePanel.js","flux/state/user_interface/user_interface.js","flux/state/state.js","flux/flux.js","components/interface/layout/DragLayer/DragLayer.js","components/interface/layout/Navbar/Navbar.js","components/interface/layout/SplitScreen/SplitScreen.js","components/interface/panels/ControlPanel/ControlPanel.js","components/interface/panels/SidePanel/SidePanel.js","ThreeContainer.js","App.js","theme/theme.js","index.js"],"names":["TabPanel","children","value","index","spacing","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","SitemapOutline","SvgIcon","d","combineStatelets","statelets","reduce","statelet","prevReducers","prevMiddleware","prevActionCreators","propertyName","reducer","middleware","actionCreators","allReducers","allMiddleware","allActionCreators","combineReducers","useActions","actions","deps","dispatch","useDispatch","useMemo","Array","isArray","map","a","bindActionCreators","computeWindowWidth","window","innerWidth","document","documentElement","body","clientWidth","computeWindowHeight","innerHeight","clientHeight","isLeftMouseClick","event","metaKey","ctrlKey","altKey","shiftKey","buttons","which","button","type","pointIntersectsBoundingBox","x","y","top","bottom","left","right","translateCSS","initialState","user_interface","sidePanel","activeTabIndex","dragState","isActive","activeDrag","isClaimed","claimerID","claimedDrops","returningDrops","parentInitialState","START_DRAG_ACTION","END_DRAG_ACTION","CLAIM_DRAG_ACTION","UNCLAIM_DRAG_ACTION","RECEIVED_DROP_ACTION","RETURNED_DROP_ACTION","ACTIVE_DRAG_STATE","ownerID","CLAIMED_DRAG_STATE","INACTIVE_DRAG_STATE","DROPPED_DRAG_STATE","state","finalX","finalY","color","parentX","parentY","initX","initY","UNCLAIMED_DRAG_STATE","RECEIVED_DROP_STATE","ids","forEach","RETURNED_DROP_STATE","action","payload","acStartDrag","mouseX","mouseY","acEndDrag","acClaimDrag","acUnclaimDrag","acRecievedDrop","acReturnedDrop","SET_TAB_INDEX","acSetSidePanelTabIndex","tabIndex","rootReducer","store","createStore","applyMiddleware","duration","dragLayerStyles","makeStyles","theme","root","position","zIndex","modal","cursor","allowPointerEvents","pointerEvents","activeDraggable","willChange","returningDraggable","display","transition","opacity","DragLayer","classes","useSelector","ref","useRef","endDrag","returnedDrop","useState","draggables","setDraggables","useEffect","current","newX","newY","adjustmentX","adjustmentY","getBoundingClientRect","width","height","winWidth","winHeight","addEventListener","handleMouseMove","handleMouseUp","removeEventListener","clientX","clientY","Math","min","max","style","transform","newDraggables","returningIDs","Object","entries","draggable","push","timeout","length","setTimeout","result","keys","sort","clearTimeout","className","clsx","key","Card","elevation","margin","backgroundColor","navStyles","flexGrow","title","Navbar","showViz","showControl","showSide","setViz","setControl","setSide","canDisablePanels","titleTooltip","name","AppBar","Toolbar","variant","Tooltip","IconButton","onClick","aria-label","disabled","edge","DIV_WIDTH","splitScreenStyles","divider","flex","palette","grey","secondary","main","boxShadow","shadows","screenWrapperFluid","flexShrink","flexBasis","overflow","screenWrapperFixed","screenWrapperHidden","noScreens","alignItems","justifyContent","textAlign","computeScreenWidths","refs","setScreenWidths","screenWidths","resizeBehaviors","isRefresh","fixedOnly","triggeredReflow","i","isVisible","isFixed","newWidth","newFlex","toFixed","oldFlex","parseFloat","widthCache","totalFluidPixels","j","computeMinWidths","totalFixedPixels","minShrink","fixedScaleFactor","SplitScreen","emptyMessage","screens","React","Children","toArray","props","splitScreenIsHidden","setState","splitScreenSetState","splitScreenBehavior","splitScreenMinShrink","resizeBehaviorSignature","JSON","stringify","screenRefs","slice","activeSlider","setActiveSlider","minWidths","e","targetX","currentX","prevPane","nextPane","delta","totalChange","fixedPercentages","dispatchEvent","Event","isFluidCompressed","isPaneVisible","screen","screenProps","assign","el","createElement","onMouseDown","preventDefault","onMouseUp","Container","maxWidth","my","sidePanelStyles","outline","border","noOutline","test","CONTROL_PANEL_ID","memo","claimDrag","unclaimDrag","recievedDrop","draggedOver","boundingBox","handleResize","isMouseOver","kiddies","setKiddies","claimedIDs","newKids","containerRef","values","triggerStartDrag","boxRefs","newKiddies","Fragment","gutterBottom","myRef","me","onMouseDownHandler","accessibilityProps","flexDirection","minWidth","panelTabs","panelBody","overflowY","overflowX","tabButton","layout","setLayout","activeIndex","setActiveIndex","random","toString","substring","redRef","blueRef","greenRef","purpleRef","orangeRef","Tabs","onChange","newValue","indicatorColor","textColor","Tab","label","icon","axis","onChangeIndex","flexWrap","ThreeContainer","scene","THREE","parentElement","camera","renderer","domElement","setSize","appendChild","geometry","material","cube","add","z","aspect","updateProjectionMatrix","animate","requestAnimationFrame","rotation","render","appStyles","fullHeight","stretchToBottom","createMuiTheme","primary","background","default","contrastThreshold","ReactDOM","ThemeProvider","CssBaseline","activePanelCount","setStateFilter","toggleViz","toggleControl","toggleSide","querySelector"],"mappings":"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","file":"static/js/main.c553d5ef.chunk.js","sourcesContent":["// Library imports\nimport React from 'react';\n// UI imports\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\n// TabPanel wraps the content that appears under a tabbed component\nexport default function TabPanel({\n    children,\n    value,\n    index,\n    spacing,\n    ...other\n}) {\n    return (\n        <Typography\n            component='div'\n            role='tabpanel'\n            hidden={value !== index}\n            id={`side-tabpanel-${index}`}\n            aria-labelledby={`side-panel-tab-${index}`}\n            {...other}\n        >\n            <Box p={spacing}>{value === index && children}</Box>\n        </Typography>\n    );\n}\n","// Library imports\nimport React from 'react';\n// UI imports\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\n// A custom svg that serves as an outline variant of mdi-material-ui's Sitemap\nexport default function SitemapOutline() {\n    return (\n        <SvgIcon>\n            <path d='m9 2v6h6v-6h-6zm2 2h2v2h-2v-2z' />\n            <path d='m17 16v6h6v-6h-2.5-1-2.5zm2 2h2v2h-2v-2z' />\n            <path d='m9 16v6h6v-6h-6zm2 2h2v2h-2v-2z' />\n            <path d='m1 16v6h6v-6h-6zm2 2h2v2h-2v-2z' />\n            <g>\n                <path d='m11 8v2h2v-2z' />\n                <path d='m19 14v2h2v-2z' />\n                <path d='m14 11v2h2v-2z' />\n                <path d='m11 14v2h2v-2z' />\n                <path d='m8 11v2h2v-2z' />\n                <path d='m3 14v2h2v-2z' />\n                <path d='m17 11v2h2v-2z' />\n                <path d='m5 11v2h2v-2z' />\n                <path d='m11 11v2h2v-2z' />\n            </g>\n        </SvgIcon>\n    );\n}\n","// Library imports\nimport { useMemo } from 'react';\nimport { bindActionCreators, combineReducers } from 'redux';\nimport { useDispatch } from 'react-redux';\n\n/*\n * Merge an array of modules each of the form\n * { propertyName, reducer, middleware, actionCreators}\n * into a single set of (combined-)reducers, middleware, and actionCreators.\n */\nexport const combineStatelets = (statelets) => {\n    // Merge the objects into one object\n    const [allReducers, allMiddleware, allActionCreators] = statelets.reduce(\n        ([prevReducers, prevMiddleware, prevActionCreators], statelet) => {\n            // Extract properties from the statelet\n            const { propertyName, reducer, middleware, actionCreators } = statelet;\n\n            // Merge the reducer, giving it the key defined by ${propertyName}.\n            const nextReducers = { ...prevReducers, [propertyName]: reducer };\n\n            // Merge the middleware\n            const nextMiddleware = [ ...prevMiddleware, ...(middleware? middleware : []) ];\n\n            // Merge the actions via a simple spread\n            const nextActionCreators = {\n                ...prevActionCreators,\n                ...(actionCreators? actionCreators : {}),\n            };\n\n            return [nextReducers, nextMiddleware, nextActionCreators];\n        },\n        [{}, [], {}]\n    );\n\n    // Combine the reducers via redux\n    const reducer = combineReducers(allReducers);\n\n    // Return the combined reducer, middleware, and actionCreators\n    return [reducer, allMiddleware, allActionCreators];\n};\n\n/*\n * A react hook that returns action creators bound to the dispatch\n */\nexport function useActions(actions, deps) {\n    const dispatch = useDispatch();\n    return useMemo(\n        () => {\n            if (Array.isArray(actions)) {\n                return actions.map((a) => bindActionCreators(a, dispatch));\n            }\n            return bindActionCreators(actions, dispatch);\n        },\n        // eslint-disable-next-line\n        deps ? [dispatch, ...deps] : [dispatch]\n    );\n}\n","// Return the width of the browser window\nexport const computeWindowWidth = () => {\n    return (\n        window.innerWidth ||\n        (document.documentElement || document.body).clientWidth\n    );\n};\n\n// Return the height of the browser window\nexport const computeWindowHeight = () => {\n    return (\n        window.innerHeight ||\n        (document.documentElement || document.body).clientHeight\n    );\n};\n\n// Determine if the event is a pure left mouse click\nexport const isLeftMouseClick = (event) => {\n    if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) {\n        return false;\n    } else if ('buttons' in event) {\n        return event.buttons === 1;\n    } else if ('which' in event) {\n        return event.which === 1;\n    } else {\n        return event.button === 1 || event.type === 'click';\n    }\n};\n\n// Return true if (x , y) lies within the bounding box (or along, i.e. edge inclusive)\nexport const pointIntersectsBoundingBox = (\n    x,\n    y,\n    { top, bottom, left, right }\n) => {\n    if (left > x || x > right || top > y || y > bottom) {\n        return false;\n    } else {\n        return true;\n    }\n};\n\nexport const translateCSS = (x, y) => `translate(${x}px, ${y}px)`;\n","// Local imports\nimport parentInitialState from '../config.js';\n\n// The name/key of this property\nexport const propertyName = 'user_interface';\n\n// Extract the local initial state, as defined by propertyName\nconst initialState = parentInitialState[propertyName] || {};\nexport default initialState;\n","// The initial global state of the app\nconst initialState = {\n    user_interface: {\n        sidePanel: {\n            activeTabIndex: 0,\n        },\n        dragState: {\n            isActive: false,\n            activeDrag: null,\n            isClaimed: false,\n            claimerID: \"\",\n            claimedDrops: {},\n            returningDrops: {},\n        },\n    },\n};\n\nexport default initialState;\n","// Local imports\nimport parentInitialState from '../config.js';\n\n// The name/key of this property\nexport const propertyName = 'dragState';\n\n// Extract the local initial state, as defined by propertyName\nconst initialState = parentInitialState[propertyName] || {};\nexport default initialState;\n","// Local imports\nimport initialState, { propertyName } from './config';\n\n// Actions\nconst START_DRAG_ACTION = 'interface/dragState/START_DRAG';\nconst END_DRAG_ACTION = 'interface/dragState/END_DRAG';\n\nconst CLAIM_DRAG_ACTION = 'interface/dragState/CLAIM_DRAG';\nconst UNCLAIM_DRAG_ACTION = 'interface/dragState/UNCLAIM_DRAG';\n\nconst RECEIVED_DROP_ACTION = 'interface/dragState/RECEIVE_DROP';\nconst RETURNED_DROP_ACTION = 'interface/dragState/RETURNED_DROP';\n\n// Statelets\nconst ACTIVE_DRAG_STATE = (activeDrag) => {\n    if (activeDrag.ownerID) {\n        return { isActive: true, activeDrag, ...CLAIMED_DRAG_STATE(activeDrag.ownerID) };\n    } else {\n        return { isActive: true, activeDrag };\n    }\n};\nconst INACTIVE_DRAG_STATE = { isActive: false, activeDrag: null };\nconst DROPPED_DRAG_STATE = (state, { finalX, finalY }) => {\n    if (state.isClaimed) {\n        const { color, id } = state.activeDrag;\n        const claimerID = state.claimerID;\n        return {claimedDrops: {\n            ...state.claimedDrops,\n            [id]: { color, finalX, finalY, claimerID, parentX: \"none\", parentY: \"none\" },\n        }};\n    } else {\n        const { color, id, initX, initY, ownerID, parentX, parentY } = state.activeDrag;\n        return { returningDrops: {\n            ...state.returningDrops,\n            [id]: { color, initX, initY, finalX, finalY, ownerID, parentX, parentY },\n        }};\n    }\n};\n\nconst CLAIMED_DRAG_STATE = (claimerID) => ({ isClaimed: true, claimerID });\nconst UNCLAIMED_DRAG_STATE = { isClaimed: false, claimerID: '' };\n\nconst RECEIVED_DROP_STATE = (state, ids) => {\n    const claimedDrops = { ...state.claimedDrops };\n    ids.forEach((id) => { delete claimedDrops[id]; });\n    return { claimedDrops };\n};\nconst RETURNED_DROP_STATE = (state, ids) => {\n    const returningDrops = { ...state.returningDrops };\n    let claimedDrops = state.claimedDrops;\n    ids.forEach((id) => {\n        if (returningDrops[id].ownerID) {\n            const { color, finalX, finalY, parentX, parentY } = returningDrops[id];\n            const claimerID = returningDrops[id].ownerID;\n            claimedDrops = {...claimedDrops,\n                [id]: { color, finalX, finalY, claimerID, parentX, parentY },\n            };\n        }\n\n        delete returningDrops[id];\n    });\n\n    if (claimedDrops !== state.claimedDrops) {\n        return {returningDrops, claimedDrops};\n    } else {\n        return {returningDrops};\n    }\n};\n\n// Reducer\nexport function reducer(state = initialState, action = {}) {\n    if (action.propertyName !== propertyName) {\n        return state;\n    }\n\n    switch (action.type) {\n        case START_DRAG_ACTION:\n            return { ...state, ...ACTIVE_DRAG_STATE(action.payload) };\n        case END_DRAG_ACTION:\n            return {\n                ...state,\n                ...UNCLAIMED_DRAG_STATE,\n                ...INACTIVE_DRAG_STATE,\n                ...DROPPED_DRAG_STATE(state, action.payload),\n            };\n        case CLAIM_DRAG_ACTION:\n            return { ...state, ...CLAIMED_DRAG_STATE(action.payload) };\n        case UNCLAIM_DRAG_ACTION:\n            return { ...state, ...UNCLAIMED_DRAG_STATE };\n        case RECEIVED_DROP_ACTION:\n            return { ...state, ...RECEIVED_DROP_STATE(state, action.payload) };\n        case RETURNED_DROP_ACTION:\n            return { ...state, ...RETURNED_DROP_STATE(state, action.payload) };\n        default:\n            return state;\n    }\n}\n\n// Action Creators\nfunction acStartDrag(color, id, initX, initY, mouseX, mouseY, parentX=\"none\", parentY=\"none\", ownerID = '') {\n    return {\n        type: START_DRAG_ACTION,\n        payload: { color, id, initX, initY, mouseX, mouseY, parentX, parentY, ownerID },\n        propertyName,\n    };\n}\nfunction acEndDrag(finalX, finalY) {\n    return { type: END_DRAG_ACTION, payload: { finalX, finalY }, propertyName };\n}\n\nfunction acClaimDrag(claimerID) {\n    return { type: CLAIM_DRAG_ACTION, payload: claimerID, propertyName };\n}\nfunction acUnclaimDrag() {\n    return { type: UNCLAIM_DRAG_ACTION, propertyName };\n}\n\nfunction acRecievedDrop(ids) {\n    return { type: RECEIVED_DROP_ACTION, payload: ids, propertyName };\n}\nfunction acReturnedDrop(ids) {\n    return { type: RETURNED_DROP_ACTION, payload: ids, propertyName };\n}\n\nexport const actionCreators = {\n    acStartDrag,\n    acEndDrag,\n    acClaimDrag,\n    acUnclaimDrag,\n    acRecievedDrop,\n    acReturnedDrop,\n};\n","// Local imports\nimport parentInitialState from '../config.js';\n\n// The name/key of this property\nexport const propertyName = 'sidePanel';\n\n// Extract the local initial state, as defined by propertyName\nconst initialState = parentInitialState[propertyName] || {};\nexport default initialState;\n","// Local imports\nimport initialState from './config';\n\n// Actions\nconst SET_TAB_INDEX = 'interface/sidePanel/SET_TAB_INDEX';\n\n// Reducer\nexport function reducer(state = initialState, action = {}) {\n    switch (action.type) {\n        case SET_TAB_INDEX:\n            return { ...state, activeTabIndex: action.payload };\n        default:\n            return state;\n    }\n}\n\n// Action Creators\nfunction acSetSidePanelTabIndex(tabIndex) {\n    return { type: SET_TAB_INDEX, payload: tabIndex };\n}\n\nexport const actionCreators = { acSetSidePanelTabIndex };\n","// Project imports\nimport { combineStatelets } from 'utils';\n// Local imports\nimport * as dragState from './dragState';\nimport * as sidePanel from './sidePanel';\n\n// Combine child states (reducer, middleware, actions) into a single stage\nexport const [reducer, middleware, actionCreators] = combineStatelets([\n    dragState,\n    sidePanel,\n]);\n","// Project imports\nimport { combineStatelets } from 'utils';\n// Local imports\nimport * as user_interface from './user_interface';\n\n// Combine child states into the root state containing the rootReducer and all middleware/actionCreators\nexport const [rootReducer, middleware, actionCreators] = combineStatelets([\n    user_interface,\n]);\n","// Library imports\nimport { createStore, applyMiddleware } from 'redux';\n// Local imports\nimport { rootReducer, middleware } from './state';\n\n// Use redux to generate the store from the rootReducer\nexport const store = createStore(rootReducer, applyMiddleware(...middleware));\n","// Library imports\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport clsx from 'clsx';\n// Project imports\nimport { actionCreators } from 'flux';\nimport { computeWindowHeight, computeWindowWidth, useActions, translateCSS } from 'utils';\n// UI imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\n\n// Extract relevant actionCreators\nconst { acEndDrag, acReturnedDrop } = actionCreators;\n\nconst duration = 500;\n\n// Styling for DragLayer\nconst dragLayerStyles = makeStyles((theme) => ({\n    // Span the viewport\n    root: {\n        position: 'fixed',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        zIndex: theme.zIndex.modal,\n        cursor: 'grabbing',\n    },\n    allowPointerEvents: {\n        pointerEvents: 'none',\n    },\n    activeDraggable: {\n        zIndex: 1,\n        willChange: 'transform',\n        position: 'absolute',\n        cursor: 'grabbing',\n    },\n    returningDraggable: {\n        display: 'inline-block',\n        position: 'absolute',\n        zIndex: 0,\n        transition: `transform ${duration}ms ease-in-out`,\n        opacity: 0.5,\n    }\n}));\n\n/*\n * Renders a container that sits above the rest of the app and spans the entire\n * viewport. Components that are actively dragged are rendered in this container.\n */\nexport default function DragLayer() {\n    // CSS classes for styling\n    const classes = dragLayerStyles();\n\n    // Read dragState from the global state\n    const activeDrag = useSelector(\n        (state) => state.user_interface.dragState.activeDrag\n    );\n\n    const ref = useRef();\n    const [endDrag, returnedDrop] = useActions([acEndDrag, acReturnedDrop]);\n\n    const [draggables, setDraggables] = useState([]);\n\n    useEffect(() => {\n        // Corner cases (ref is bad or no dragging)\n        if (!ref || !ref.current || !activeDrag) {\n            return;\n        }\n\n        const { initX, initY, mouseX, mouseY } = activeDrag;\n\n        const adjustmentX = initX - mouseX;\n        const adjustmentY = initY - mouseY;\n\n        let newX;\n        let newY;\n\n        const { width, height } = ref.current.getBoundingClientRect();\n\n        const winWidth = computeWindowWidth() - width;\n        const winHeight = computeWindowHeight() - height;\n\n        // Mouse move handler\n        function handleMouseMove({ clientX, clientY }) {\n            if (!ref || !ref.current) {\n                return;\n            }\n            newX = Math.min(Math.max(clientX + adjustmentX, 0), winWidth);\n            newY = Math.min(Math.max(clientY + adjustmentY, 0), winHeight);\n            // Mouse position\n            ref.current.style.transform = translateCSS(newX, newY);\n        }\n\n        // Mouse up handler\n        function handleMouseUp({ clientX, clientY }) {\n            newX = Math.min(Math.max(clientX + adjustmentX, 0), winWidth);\n            newY = Math.min(Math.max(clientY + adjustmentY, 0), winHeight);\n            endDrag(newX, newY);\n        }\n\n        window.addEventListener('mousemove', handleMouseMove, false);\n        window.addEventListener('mouseup', handleMouseUp, false);\n\n        // Cleanup event handlers on unmount\n        return function cleanup() {\n            window.removeEventListener('mousemove', handleMouseMove);\n            window.removeEventListener('mouseup', handleMouseUp);\n        };\n    }, [draggables, activeDrag, endDrag, ref]);\n\n    const dragState = useSelector((state) => state.user_interface.dragState);\n\n    useEffect(() => {\n        const newDraggables = {};\n        if (dragState.activeDrag) {\n            newDraggables[dragState.activeDrag.id] = {...dragState.activeDrag};\n            newDraggables[dragState.activeDrag.id].isActive = true;\n        }\n\n        const returningIDs = [];\n        Object.entries(dragState.returningDrops).forEach(([id, draggable]) => {\n            newDraggables[id] = draggable;\n            returningIDs.push(id);\n        });\n\n        let timeout = null;\n        if (returningIDs.length > 0) {\n            timeout = setTimeout(() => returnedDrop(returningIDs), duration);\n        }\n\n        const ids = Object.keys(newDraggables).sort();\n        const result = ids.map((id) => [id, newDraggables[id]]);\n        setDraggables(result);\n\n        return function cleanup() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        };\n    }, [dragState.activeDrag, dragState.returningDrops, returnedDrop]);\n\n    // Render the container if on object is being dragged\n    if (draggables.length > 0) {\n        return (\n            <div\n                className={clsx(\n                    classes.root,\n                    !dragState.isActive && classes.allowPointerEvents\n                )}\n            >\n                {draggables.map(([id, draggable]) => {\n                    const { color, initX, initY } = draggable;\n                    if (draggable.isActive) {\n                        return (\n                            <div\n                                key={id}\n                                ref={ref}\n                                className={classes.activeDraggable}\n                                style={{transform: `scale(1) ${translateCSS(initX, initY)}`}}\n                            >\n                                <Card\n                                    elevation={12}\n                                    style={{\n                                        width: 50,\n                                        height: 50,\n                                        margin: 8,\n                                        backgroundColor: color,\n                                    }}\n                                />\n                            </div>\n                        );\n                    } else {\n                        return (\n                            <div key={id}\n                                className={classes.returningDraggable}\n                                style={{transform: translateCSS(initX, initY)}\n                            }\n                            >\n                                <Card\n                                    style={{\n                                        width: 50,\n                                        height: 50,\n                                        margin: 8,\n                                        backgroundColor: color,\n                                    }}\n                                />\n                            </div>\n                        );\n                    }\n                })}\n            </div>\n        );\n    } else {\n        return null;\n    }\n}\n","// Library imports\nimport React from 'react';\n// UI imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CubeFilledIcon from 'mdi-material-ui/Cube';\nimport CubeOutlineIcon from 'mdi-material-ui/CubeOutline';\nimport SitemapFilledIcon from 'mdi-material-ui/Sitemap';\nimport { SitemapOutline as SitemapOutlineIcon } from 'components';\nimport WrenchFilledIcon from 'mdi-material-ui/Wrench';\nimport WrenchOutlineIcon from 'mdi-material-ui/WrenchOutline';\n\n// Styling for Navbar\nconst navStyles = makeStyles(() => ({\n    // Fixed height navbar\n    root: {\n        flexGrow: 0,\n    },\n    // Fill space between title and control buttons\n    title: {\n        flexGrow: 1,\n    },\n}));\n\n// Renders a Navbar across the top of the screen; contains a few simple controls.\nexport default function Navbar({\n    showViz,\n    showControl,\n    showSide,\n    setViz,\n    setControl,\n    setSide,\n    canDisablePanels,\n}) {\n    // CSS classes for styling\n    const classes = navStyles();\n\n    // Format tool tip strings\n    const titleTooltip = (state, name) => {\n        if (state) {\n            return `Hide ${name}`;\n        } else {\n            return `Show ${name}`;\n        }\n    };\n\n    // Render the Navbar and buttons\n    return (\n        <div className={classes.root}>\n            <AppBar position='static'>\n                <Toolbar>\n                    <Typography variant='h6' className={classes.title}>\n                        {'TigerJS'}\n                    </Typography>\n                    <Tooltip title={titleTooltip(showViz, 'Visualization')}>\n                        <IconButton\n                            onClick={() => setViz(!showViz)}\n                            aria-label='toggle-visualization-panel'\n                            disabled={showViz && !canDisablePanels}\n                        >\n                            {showViz ? <CubeFilledIcon /> : <CubeOutlineIcon />}\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title={titleTooltip(showControl, 'Control Panel')}>\n                        <IconButton\n                            onClick={() => setControl(!showControl)}\n                            aria-label='toggle-control-panel'\n                            disabled={showControl && !canDisablePanels}\n                        >\n                            {showControl ? (\n                                <SitemapFilledIcon />\n                            ) : (\n                                <SitemapOutlineIcon />\n                            )}\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title={titleTooltip(showSide, 'Side Panel')}>\n                        <IconButton\n                            onClick={() => setSide(!showSide)}\n                            aria-label='toggle-side-panel'\n                            disabled={showSide && !canDisablePanels}\n                            edge='end'\n                        >\n                            {showSide ? (\n                                <WrenchFilledIcon />\n                            ) : (\n                                <WrenchOutlineIcon />\n                            )}\n                        </IconButton>\n                    </Tooltip>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","// Libary imports\nimport React, { Fragment, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\n// Project imports\nimport { computeWindowWidth, isLeftMouseClick } from 'utils';\n// UI imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\n// Constant that defines column divider width\nconst DIV_WIDTH = 3;\n\n// Styling for the split screen component\nconst splitScreenStyles = makeStyles((theme) => ({\n    // Wrapper for the split screen\n    root: {\n        display: 'flex',\n        position: 'relative',\n        height: '100%',\n        '&.resizing': {\n            cursor: 'col-resize',\n        },\n    },\n    // Divider between the screens\n    divider: {\n        width: DIV_WIDTH,\n        flex: 'initial',\n        backgroundColor:\n            theme.palette.type === 'light'\n                ? theme.palette.grey[100]\n                : theme.palette.grey[900],\n        cursor: 'col-resize',\n        '&:hover:not(.inActive), &.active': {\n            backgroundColor: theme.palette.secondary.main,\n        },\n        boxShadow: theme.shadows[3],\n    },\n    // Wrapper for screens that stretch as the window grows\n    screenWrapperFluid: {\n        position: 'relative',\n        flexGrow: 1,\n        flexShrink: 1,\n        flexBasis: '0%',\n        overflow: 'scroll',\n    },\n    // Wrapper for screens that do not stretch as the window grows\n    screenWrapperFixed: {\n        position: 'relative',\n        flex: 'initial',\n        overflow: 'scroll',\n    },\n    // Wrapper for hidden/disabled screens\n    screenWrapperHidden: {\n        display: 'none',\n    },\n    // Wrapper for message when there are no screens\n    noScreens: {\n        alignItems: 'center',\n        display: 'flex',\n        justifyContent: 'center',\n        textAlign: 'center',\n    },\n}));\n\n// Measure the visible width of each screen and return the widths as an array\nconst computeScreenWidths = (refs) => {\n    return refs.map((ref) => {\n        if (!ref) {\n            return 0;\n        } else {\n            return ref.clientWidth;\n        }\n    });\n};\n\n// Apply the screen widths directly to the DOM's CSS\nconst setScreenWidths = (\n    refs,\n    screenWidths,\n    resizeBehaviors,\n    isRefresh,\n    fixedOnly\n) => {\n    // Boolean to keep track if we need to rerender or not\n    let triggeredReflow = false;\n\n    // For each screen...\n    refs.forEach((ref, i) => {\n        if (!ref) {\n            // \"Continue\"\n            return;\n        } else if (resizeBehaviors[i].isVisible) {\n            if (resizeBehaviors[i].isFixed) {\n                // If visible and FIXED\n                const newWidth = fixedOnly\n                    ? `${screenWidths[i]}%`\n                    : `${screenWidths[i]}px`;\n                // Only rerender if necessary\n                if (ref.style.width !== newWidth) {\n                    ref.style.width = newWidth;\n                    triggeredReflow = true;\n                }\n            } else {\n                // If visible and FLUID\n                const newFlex = screenWidths[i].toFixed(1);\n                const oldFlex = parseFloat(ref.style.flexGrow).toFixed(\n                    1\n                );\n                const widthCache = ref.widthCache;\n\n                // Only rerender if necessary\n                if (\n                    oldFlex !== newFlex &&\n                    (oldFlex > 0 || screenWidths[i] > 0)\n                ) {\n                    // Normal case, where flexGrow = pixel width\n                    ref.style.flexGrow = newFlex;\n                    triggeredReflow = true;\n\n                    if (widthCache) {\n                        delete ref.widthCache;\n                    }\n                } else if (widthCache && isRefresh) {\n                    // This screen was just hidden; need to adjust its size\n                    let totalFluidPixels = 0;\n                    screenWidths.forEach((width, j) => {\n                        if (!resizeBehaviors[j].isFixed && j !== i) {\n                            totalFluidPixels += width;\n                        }\n                    });\n                    if (totalFluidPixels <= 0) {\n                        // This is the only fluid screen, so it can be large\n                        ref.style.flexGrow = computeWindowWidth();\n                    } else if (widthCache >= 1) {\n                        // There was the last fluid screen so it can be anything\n                        ref.style.flexGrow = totalFluidPixels;\n                    } else {\n                        /*\n                         * Maintain the percentage of fluid pixels this screen\n                         * used before it disappeared: ratio = me/(Total + me).\n                         *\n                         * Total = totalFluidPixels, ratio = widthCache.\n                         * Solve for me.\n                         */\n                        ref.style.flexGrow =\n                            (totalFluidPixels * widthCache) /\n                            (1.0 - widthCache);\n                    }\n                    triggeredReflow = true;\n                }\n            }\n        } else if (isRefresh) {\n            // This screen is invisible, BUT (any) visibility state just changed!\n            if (!resizeBehaviors[i].isFixed) {\n                // Cache the current width percentage if necessary\n                if (!ref.widthCache) {\n                    // Save normalized width\n                    let totalFluidPixels = 0;\n                    screenWidths.forEach((width, j) => {\n                        if (!resizeBehaviors[j].isFixed) {\n                            totalFluidPixels += width;\n                        }\n                    });\n                    totalFluidPixels -= DIV_WIDTH;\n\n                    if (totalFluidPixels <= 0) {\n                        ref.widthCache = 1;\n                    } else {\n                        ref.widthCache = Math.max(\n                            0.15,\n                            ref.style.flexGrow / totalFluidPixels\n                        );\n                    }\n                }\n                ref.style.flexGrow = 0;\n            }\n        }\n    });\n\n    return triggeredReflow;\n};\n\n// Compute the minimum pixel widths allowable for each screen given window width\nconst computeMinWidths = (resizeBehaviors, winWidth) => {\n    // First count total space taken up by minimum widths\n    let totalFixedPixels = 0;\n    for (const { isFixed, minShrink } of resizeBehaviors) {\n        if (isFixed) {\n            totalFixedPixels += minShrink;\n        } else {\n            totalFixedPixels += minShrink * winWidth;\n        }\n    }\n\n    // If we have too much fixed space allocated, need to scale everything down\n    let fixedScaleFactor = 1.0;\n    if (totalFixedPixels > winWidth) {\n        fixedScaleFactor = winWidth / totalFixedPixels;\n        totalFixedPixels = winWidth;\n    }\n\n    // Compute and return minwidths\n    const totalFluidPixels = winWidth - totalFixedPixels;\n    return resizeBehaviors.map(({ isFixed, minShrink }) => {\n        if (isFixed) {\n            return minShrink * fixedScaleFactor;\n        } else {\n            return minShrink * totalFluidPixels;\n        }\n    });\n};\n\n// SplitScreen divides its children into resizable columns\nexport default function SplitScreen({ children, emptyMessage }) {\n    // CSS classes for styling\n    const classes = splitScreenStyles();\n\n    // Extract children into array of screens/views\n    const screens = React.Children.toArray(children);\n\n    // Determine resizing behavior from props\n    const resizeBehaviors = screens.map(({ props }) => {\n        // Fluid behavior with minWidth=0 by default\n        return {\n            isVisible: !(props.splitScreenIsHidden || false),\n            setState: props.splitScreenSetState || (() => {}),\n            isFixed: props.splitScreenBehavior === 'fixed',\n            minShrink: props.splitScreenMinShrink || 0,\n        };\n    });\n    const resizeBehaviorSignature = JSON.stringify(resizeBehaviors);\n\n    // Refs to keep track of screens (and set their CSS)\n    const screenRefs = useRef([]);\n    useEffect(() => {\n       screenRefs.current = screenRefs.current.slice(0, screens.length);\n    }, [screens.length]);\n\n    // activeSlider is index of the slider being dragged by the user. -1 if none\n    const [activeSlider, setActiveSlider] = useState(-1);\n\n    // Effect for resizing columns on mousedrag\n    useEffect(() => {\n        // Corner cases (ref is bad or no active sliders)\n        if (!screenRefs.current || activeSlider < 0) {\n            return;\n        }\n\n        // Compute constants needed to determine\n        const winWidth = computeWindowWidth();\n        const screenWidths = computeScreenWidths(screenRefs.current);\n        const minWidths = computeMinWidths(resizeBehaviors, winWidth);\n\n        // Mouse move handler\n        function handleMouseMove(e) {\n            // Mouse position\n            const targetX = e.clientX;\n\n            /*\n             * Find the divider position, determine the adjacent panes, and\n             * check if at least one visible screen is fluid (i.e. not fixed)\n             */\n            let currentX = -DIV_WIDTH / 2.0;\n            let prevPane = 0;\n            let nextPane = screens.length - 1;\n            let fixedOnly = true;\n            for (let i = 0; i <= activeSlider; i++) {\n                if (resizeBehaviors[i].isVisible) {\n                    prevPane = i;\n                    currentX += screenWidths[i] + DIV_WIDTH;\n\n                    if (!resizeBehaviors[i].isFixed) {\n                        fixedOnly = false;\n                    }\n                }\n            }\n\n            for (let i = screens.length - 1; i > activeSlider; i--) {\n                if (resizeBehaviors[i].isVisible) {\n                    nextPane = i;\n\n                    if (!resizeBehaviors[i].isFixed) {\n                        fixedOnly = false;\n                    }\n                }\n            }\n\n            // Adjust screens accordingly\n            let delta = targetX - currentX;\n            if (delta > 0) {\n                // Mouse lies to the right of the divider\n                for (let i = activeSlider + 1; i < screens.length; i++) {\n                    if (resizeBehaviors[i].isVisible) {\n                        // Compute (clamped) exchange\n                        const newWidth = Math.max(\n                            minWidths[i],\n                            screenWidths[i] - delta\n                        );\n                        const totalChange = screenWidths[i] - newWidth;\n                        // Exchange width\n                        screenWidths[i] = newWidth;\n                        delta -= totalChange;\n                        screenWidths[prevPane] += totalChange;\n\n                        // Break when we hit the target\n                        if (delta <= 0) {\n                            break;\n                        }\n                    }\n                }\n            } else if (delta < 0) {\n                // Mouse lies to the left of the divider\n                delta = -delta; // Flip sign for readibility\n                for (let i = activeSlider; i >= 0; i--) {\n                    if (resizeBehaviors[i].isVisible) {\n                        // Compute (clamped) exchange\n                        const newWidth = Math.max(\n                            minWidths[i],\n                            screenWidths[i] - delta\n                        );\n                        const totalChange = screenWidths[i] - newWidth;\n                        // Exchange width\n                        screenWidths[i] = newWidth;\n                        delta -= totalChange;\n                        screenWidths[nextPane] += totalChange;\n\n                        // Break when we hit the target\n                        if (delta <= 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n\n            let triggeredReflow = false;\n            if (!fixedOnly) {\n                // Apply new widths to DOM\n                triggeredReflow = setScreenWidths(\n                    screenRefs.current,\n                    screenWidths,\n                    resizeBehaviors,\n                    false,\n                    false\n                );\n            } else {\n                // If all screens are fixed, need to rescale to percentages\n                const fixedPercentages = screenWidths.map((width, i) => {\n                    if (\n                        resizeBehaviors[i].isVisible &&\n                        resizeBehaviors[i].isFixed\n                    ) {\n                        return (width / winWidth) * 100.0;\n                    } else {\n                        return width;\n                    }\n                });\n\n                // Apply new percentages to DOM\n                triggeredReflow = setScreenWidths(\n                    screenRefs.current,\n                    fixedPercentages,\n                    resizeBehaviors,\n                    false,\n                    true\n                );\n            }\n\n            /*\n             * If triggeredReflow is true, we adjust a column; let children know\n             * their size changed by sending a window resize event\n             */\n            if (triggeredReflow) {\n                window.dispatchEvent(new Event('resize'));\n            }\n        }\n\n        // Mouse up handler\n        function handleMouseUp() {\n            // Hide any panels with no width\n            screenWidths.forEach((width, i) => {\n                if (width <= 0 && resizeBehaviors[i].isVisible) {\n                    resizeBehaviors[i].setState(false);\n                }\n            });\n            // Disable the (released) slider\n            setActiveSlider(-1);\n        }\n\n        window.addEventListener('mousemove', handleMouseMove, false);\n        window.addEventListener('mouseup', handleMouseUp, false);\n\n        // Cleanup event handlers on unmount\n        return function cleanup() {\n            window.removeEventListener('mousemove', handleMouseMove);\n            window.removeEventListener('mouseup', handleMouseUp);\n        };\n        // eslint-disable-next-line\n    }, [activeSlider, screens.length, resizeBehaviorSignature]);\n\n    // Effect to ensure proper formatting on init and after visibility change\n    useEffect(() => {\n        // Corner case (ref is bad)\n        if (!screenRefs.current) {\n            return;\n        }\n\n        // Measure width of screens\n        let screenWidths = computeScreenWidths(screenRefs.current);\n\n        /*\n         * Determine how much of the window is taken up by the fixed screens.\n         * Also, check if there are any visible fluid screens (i.e. not fixed)\n         * at all.\n         */\n        const winWidth = computeWindowWidth();\n        let totalFixedPixels = 0;\n        let fixedOnly = true;\n        screenWidths.forEach((width, i) => {\n            if (resizeBehaviors[i].isFixed) {\n                totalFixedPixels += width;\n            } else if (resizeBehaviors[i].isVisible) {\n                fixedOnly = false;\n            }\n        });\n\n        /*\n         * If there is too much fixed space allocated, fixed screens must be\n         * scaled down. If all screens are fixed, fixed screens must be scaled\n         * exactly to the width of the screen. If fixed screens would eat up all\n         * the space of fluid screens, reallocate 10% of the window for the fluid\n         * screens.\n         */\n        let fixedScaleFactor = 1.0;\n        let isFluidCompressed = false;\n        if (totalFixedPixels > winWidth || fixedOnly) {\n            fixedScaleFactor = winWidth / totalFixedPixels;\n        } else if (totalFixedPixels > winWidth * 0.9) {\n            fixedScaleFactor = (winWidth * 0.9) / totalFixedPixels;\n\n            // Make a note that the fluid screens were compressed\n            isFluidCompressed = true;\n        }\n\n        // Adjust the screen widths accordingly\n        screenWidths = screenWidths.map((width, i) => {\n            if (resizeBehaviors[i].isVisible) {\n                if (resizeBehaviors[i].isFixed) {\n                    // Rescale fixed divs\n                    if (fixedOnly) {\n                        // Fixed divs use percentage widths\n                        return ((width * fixedScaleFactor) / winWidth) * 100;\n                    } else {\n                        return width * fixedScaleFactor;\n                    }\n                } else if (\n                    isFluidCompressed &&\n                    width === 0 &&\n                    !screenRefs.current[i].widthCache\n                ) {\n                    // These screens were compressed to zero, so rescale up\n                    return winWidth;\n                }\n            }\n\n            // Use precomputed width by default\n            return width;\n        });\n\n        // Apply new screen widths\n        setScreenWidths(\n            screenRefs.current,\n            screenWidths,\n            resizeBehaviors,\n            true,\n            fixedOnly\n        );\n\n        // Refresh with second pass if necessary\n        if (!fixedOnly) {\n            screenWidths = computeScreenWidths(screenRefs.current);\n            setScreenWidths(\n                screenRefs.current,\n                screenWidths,\n                resizeBehaviors,\n                false,\n                fixedOnly\n            );\n        }\n\n        // Trigger a window resize event\n        window.dispatchEvent(new Event('resize'));\n\n        // eslint-disable-next-line\n    }, [resizeBehaviorSignature]);\n\n    // isPaneVisible is true if and only if at least one screen is visible\n    let isPaneVisible = false;\n    return (\n        <div className={clsx(classes.root, activeSlider > -1 && 'resizing')}>\n            {screens.map((screen, i) => {\n                // Safely remove splitScreen props from children\n                const screenProps = Object.assign({}, screen.props);\n                delete screenProps.splitScreenIsHidden;\n                delete screenProps.splitScreenSetState;\n                delete screenProps.splitScreenBehavior;\n                delete screenProps.splitScreenMinShrink;\n\n                // Record if this pane is visible\n                if (resizeBehaviors[i].isVisible) {\n                    isPaneVisible = true;\n                }\n\n                // Render this screen\n                return (\n                    <Fragment key={screen.key}>\n                        <div\n                            ref={el => screenRefs.current[i] = el}\n                            className={clsx(\n                                resizeBehaviors[i].isFixed\n                                    ? classes.screenWrapperFixed\n                                    : classes.screenWrapperFluid,\n                                !resizeBehaviors[i].isVisible &&\n                                    classes.screenWrapperHidden\n                            )}\n                        >\n                            {resizeBehaviors[i].isVisible &&\n                                React.createElement(screen.type, screenProps)}\n                        </div>\n                        {i < screens.length - 1 &&\n                            resizeBehaviors[i + 1].isVisible &&\n                            isPaneVisible && (\n                                <div\n                                    onMouseDown={(e) => {\n                                        if (isLeftMouseClick(e)) {\n                                            setActiveSlider(i);\n                                            e.preventDefault();\n                                        }\n                                    }}\n                                    onMouseUp={() => setActiveSlider(-1)}\n                                    className={clsx(\n                                        classes.divider,\n                                        activeSlider === i\n                                            ? 'active'\n                                            : activeSlider > -1 && 'inActive'\n                                    )}\n                                />\n                            )}\n                    </Fragment>\n                );\n            })}\n            {!isPaneVisible && (\n                <Container className={classes.noScreens} maxWidth='sm'>\n                    <Box my={4}>\n                        <Typography variant='h4' component='h1'>\n                            {emptyMessage}\n                        </Typography>\n                    </Box>\n                </Container>\n            )}\n        </div>\n    );\n}\n","// Library imports\nimport React, { memo, useEffect, useMemo, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport clsx from 'clsx';\n// Project imports\nimport { actionCreators } from 'flux';\nimport { pointIntersectsBoundingBox, useActions, isLeftMouseClick } from 'utils';\n// UI imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nconst { acClaimDrag, acUnclaimDrag, acRecievedDrop, acStartDrag } = actionCreators;\n\n// Styling for the side panel\nconst sidePanelStyles = makeStyles((theme) => ({\n    root: {\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n    },\n    outline: {\n        border: `2px solid ${theme.palette.secondary.main}`,\n    },\n    noOutline: {\n        border: '2px solid transparent',\n    },\n    test: {\n        width: 50,\n        height: 50,\n        margin: 8,\n        cursor: 'grab',\n        '&:hover': {\n            boxShadow: theme.shadows[8],\n        },\n    },\n}));\n\nconst CONTROL_PANEL_ID = 'CONTROL_PANEL';\n\n// Panel on the side of the screen to manage components and properties\nexport default memo(function ControlPanel() {\n    // CSS classes for styling\n    const classes = sidePanelStyles();\n\n    // Read dragState from the global state\n    const isActive = useSelector((state) => state.user_interface.dragState.isActive);\n    const claimerID = useSelector((state) => state.user_interface.dragState.claimerID);\n\n    const ref = useRef();\n\n    const [claimDrag, unclaimDrag, recievedDrop] = useActions([acClaimDrag, acUnclaimDrag, acRecievedDrop]);\n\n    const draggedOver = useMemo(() => (isActive &&  claimerID === CONTROL_PANEL_ID), [isActive, claimerID]);\n\n    useEffect(() => {\n        // Corner case (no dragging)\n        if (!ref || !ref.current || !isActive) {\n            return;\n        }\n\n        let boundingBox;\n\n        function handleResize() {\n            const {\n                top,\n                bottom,\n                left,\n                right,\n            } = ref.current.getBoundingClientRect();\n            boundingBox = { top, bottom, left, right };\n        }\n\n        // Mouse move handler\n        function handleMouseMove({ clientX, clientY }) {\n            if (!ref || !ref.current) {\n                return;\n            }\n\n            const isMouseOver = pointIntersectsBoundingBox(\n                clientX,\n                clientY,\n                boundingBox\n            );\n            if (draggedOver) {\n                if (!isMouseOver) {\n                    unclaimDrag();\n                }\n            } else {\n                if (isMouseOver) {\n                    claimDrag(CONTROL_PANEL_ID);\n                }\n            }\n        }\n\n        handleResize();\n        window.addEventListener('resize', handleResize, false);\n        window.addEventListener('mousemove', handleMouseMove, false);\n\n        // Cleanup event handlers on unmount\n        return function cleanup() {\n            window.removeEventListener('resize', handleResize);\n            window.removeEventListener('mousemove', handleMouseMove);\n        };\n    }, [isActive, draggedOver, claimDrag, unclaimDrag]);\n\n    const claimedDrops = useSelector((state) => state.user_interface.dragState.claimedDrops);\n    const [kiddies, setKiddies] = useState({});\n    useEffect(() => {\n        const claimedIDs = [];\n        const newKids = {};\n        Object.entries(claimedDrops).forEach(([id, draggable]) => {\n            if (draggable.claimerID === CONTROL_PANEL_ID) {\n                claimedIDs.push(id);\n                newKids[id] = draggable;\n            }\n        });\n\n        if (claimedIDs.length > 0) {\n            recievedDrop(claimedIDs);\n\n            let x = 0;\n            let y = 0;\n            if (containerRef && containerRef.current) {\n                const { left, top } = containerRef.current.getBoundingClientRect();\n                x = left;\n                y = top;\n            }\n\n            Object.values(newKids).forEach((draggable) => {\n                if (draggable.parentX === \"none\") {\n                    draggable.x = draggable.finalX - x;\n                } else {\n                    draggable.x = draggable.parentX;\n                }\n                if (draggable.parentY === \"none\") {\n                    draggable.y = draggable.finalY - y;\n                } else {\n                    draggable.y = draggable.parentY;\n                }\n\n                delete draggable.finalX;\n                delete draggable.parentX;\n                delete draggable.finalY;\n                delete draggable.parentY;\n            });\n\n            setKiddies({...kiddies, ...newKids});\n        }\n    }, [kiddies, claimedDrops, recievedDrop]);\n    const containerRef = useRef();\n\n    const triggerStartDrag = useActions(acStartDrag);\n\n    const boxRefs = useRef([]);\n    useEffect(() => {\n       boxRefs.current = boxRefs.current.slice(0, Object.keys(kiddies).length);\n    }, [kiddies]);\n\n    const onMouseDownHandler = (e, id, index, color) => {\n        const myRef = boxRefs.current[index];\n        if (isLeftMouseClick(e) && myRef) {\n            const { left, top } = myRef.getBoundingClientRect();\n            const me  = kiddies[id];\n            triggerStartDrag(color, id, left, top, e.clientX, e.clientY, me.x, me.y, CONTROL_PANEL_ID);\n            e.preventDefault();\n        }\n    };\n\n    const activeDrag = useSelector((state) => state.user_interface.dragState.activeDrag);\n\n    useEffect(() => {\n        if (activeDrag && (activeDrag.id in kiddies)) {\n            const newKiddies = {...kiddies};\n            delete newKiddies[activeDrag.id];\n            setKiddies(newKiddies);\n        }\n    }, [activeDrag, kiddies]);\n\n    // Render the side panel in a tabbed layout\n    return (\n        <React.Fragment>\n        <div\n            ref={ref}\n            className={clsx(classes.root, draggedOver ? classes.outline : classes.noOutline)}\n        >\n        </div>\n        <Container ref={containerRef} style={{position: 'absolute'}}>\n            <Box my={4}>\n                <Typography variant='h4' component='h1' gutterBottom>\n                    Control Panel\n                </Typography>\n            </Box>\n            { Object.entries(kiddies).map(([id, draggable], i) => (\n                <div key={id} ref={el => boxRefs.current[i] = el} style={{zIndex: 1, display: 'inline-block', position: 'absolute', left: draggable.x, top: draggable.y}}>\n                    <Card\n                        onMouseDown={(e) =>\n                            onMouseDownHandler(e, id, i, draggable.color)\n                        }\n                        style={{\n                            backgroundColor: draggable.color,\n                        }}\n                        className={classes.test}\n                    />\n                </div>\n            ))}\n        </Container>\n        </React.Fragment>\n    );\n});\n","// Library imports\nimport React, { useEffect, useRef, memo } from 'react';\nimport { useSelector } from 'react-redux';\n// Project imports\nimport { TabPanel } from 'components';\nimport { actionCreators } from 'flux';\nimport { isLeftMouseClick, useActions } from 'utils';\n// UI imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Card from '@material-ui/core/Card';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport SwipeableViews from 'react-swipeable-views';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport ToolboxIcon from 'mdi-material-ui/Toolbox';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n// Extract relevant actionCreators\nconst { acSetSidePanelTabIndex, acStartDrag } = actionCreators;\n\n// Computes the accessibility labels for the side panel\nfunction accessibilityProps(index) {\n    return {\n        id: `side-panel-tab-${index}`,\n        'aria-controls': `side-panel-tabpanel-${index}`,\n    };\n}\n\n// Styling for the side panel\nconst sidePanelStyles = makeStyles((theme) => ({\n    // Wrapper for the panel\n    root: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 200,\n    },\n    // panelTabs have fixed height\n    panelTabs: {\n        flexGrow: 0,\n    },\n    panelBody: {\n        position: 'relative',\n        flexGrow: 1,\n        '&>div': {\n            position: 'absolute',\n            overflowY: 'scroll',\n            overflowX: 'hidden',\n            height: '100%',\n            width: '100%',\n        },\n    },\n    // Allow for smaller buttons\n    tabButton: {\n        minWidth: 0,\n    },\n    test: {\n        width: 50,\n        height: 50,\n        margin: 8,\n        backgroundColor: 'purple',\n        cursor: 'grab',\n        '&:hover': {\n            boxShadow: theme.shadows[8],\n        },\n    },\n}));\n\n// Panel on the side of the screen to manage components and properties\nexport default memo(function SidePanel() {\n    // CSS classes for styling\n    const classes = sidePanelStyles();\n\n    // Layout is 1 if the panel is in wide mode; 0 if in narrow mode\n    const [layout, setLayout] = React.useState(0);\n\n    // Ref for tracking panel width\n    const ref = useRef();\n\n    // Effect for measuring panel width on resize\n    useEffect(() => {\n        // Resize handler\n        function handleResize() {\n            if (!ref || !ref.current) {\n                return;\n            }\n\n            if (ref.current.clientWidth > 350) {\n                // Wide layout\n                setLayout(1);\n            } else {\n                // Narrow layout\n                setLayout(0);\n            }\n        }\n\n        window.addEventListener('resize', handleResize, false);\n        handleResize();\n\n        // Cleanup event handlers on unmount\n        return function cleanup() {\n            window.removeEventListener('resize', handleResize);\n        };\n    }, []);\n\n    // ActiveIndex is the index of the tab currently in view\n    const [activeIndex, setActiveIndex] = [\n        useSelector((state) => state.user_interface.sidePanel.activeTabIndex),\n        useActions(acSetSidePanelTabIndex),\n    ];\n\n    // Helper function to set active tab on tab click\n    const handleChange = (event, newValue) => {\n        setActiveIndex(newValue);\n    };\n\n    // Helper function to set active tab on view swipe\n    const handleChangeIndex = (index) => {\n        setActiveIndex(index);\n    };\n\n    // Spacing passed to tab panels depends on layout\n    const spacing = layout ? 3 : 1;\n\n    // TODO: remove! Temporary for testing drag\n    const triggerStartDrag = useActions(acStartDrag);\n    const onMouseDownHandler = (e, ref, color) => {\n        if (isLeftMouseClick(e) && ref && ref.current) {\n            const { left, top } = ref.current.getBoundingClientRect();\n            const id =\n                Math.random()\n                    .toString(36)\n                    .substring(2, 15) +\n                Math.random()\n                    .toString(36)\n                    .substring(2, 15);\n            triggerStartDrag(color, id, left, top, e.clientX, e.clientY);\n            e.preventDefault();\n        }\n    };\n\n    const redRef = useRef();\n    const blueRef = useRef();\n    const greenRef = useRef();\n    const purpleRef = useRef();\n    const orangeRef = useRef();\n\n    // Render the side panel in a tabbed layout\n    return (\n        <div ref={ref} className={classes.root}>\n            <AppBar\n                className={classes.panelTabs}\n                component='div'\n                position='static'\n                color='default'\n            >\n                <Tabs\n                    value={activeIndex}\n                    onChange={handleChange}\n                    indicatorColor='primary'\n                    textColor='primary'\n                    variant='fullWidth'\n                    aria-label='side-panel'\n                >\n                    <Tooltip title={layout ? '' : 'Components'}>\n                        <Tab\n                            className={classes.tabButton}\n                            label={layout ? 'Components' : ''}\n                            icon={<ToolboxIcon />}\n                            {...accessibilityProps(0)}\n                        />\n                    </Tooltip>\n                    <Tooltip title={layout ? '' : 'Properties'}>\n                        <Tab\n                            className={classes.tabButton}\n                            label={layout ? 'Properties' : ''}\n                            icon={<TuneIcon />}\n                            {...accessibilityProps(1)}\n                        />\n                    </Tooltip>\n                </Tabs>\n            </AppBar>\n            <SwipeableViews\n                axis='x'\n                index={activeIndex}\n                onChangeIndex={handleChangeIndex}\n                className={classes.panelBody}\n            >\n                <TabPanel value={activeIndex} index={0} spacing={spacing}>\n                    <div\n                        style={{\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                            justifyContent: 'center',\n                        }}\n                    >\n                        <div ref={redRef}>\n                            <Card\n                                style={{\n                                    backgroundColor: 'red',\n                                }}\n                                className={classes.test}\n                                onMouseDown={(e) =>\n                                    onMouseDownHandler(e, redRef, 'red')\n                                }\n                            />\n                        </div>\n                        <div ref={blueRef}>\n                            <Card\n                                style={{\n                                    backgroundColor: 'blue',\n                                }}\n                                className={classes.test}\n                                onMouseDown={(e) =>\n                                    onMouseDownHandler(e, blueRef, 'blue')\n                                }\n                            />\n                        </div>\n                        <div ref={greenRef}>\n                            <Card\n                                style={{\n                                    backgroundColor: 'green',\n                                }}\n                                className={classes.test}\n                                onMouseDown={(e) =>\n                                    onMouseDownHandler(e, greenRef, 'green')\n                                }\n                            />\n                        </div>\n                        <div ref={purpleRef}>\n                            <Card\n                                style={{\n                                    backgroundColor: 'purple',\n                                }}\n                                className={classes.test}\n                                onMouseDown={(e) =>\n                                    onMouseDownHandler(e, purpleRef, 'purple')\n                                }\n                            />\n                        </div>\n                        <div ref={orangeRef}>\n                            <Card\n                                style={{\n                                    backgroundColor: 'orange',\n                                }}\n                                className={classes.test}\n                                onMouseDown={(e) =>\n                                    onMouseDownHandler(e, orangeRef, 'orange')\n                                }\n                            />\n                        </div>\n                    </div>\n                </TabPanel>\n                <TabPanel value={activeIndex} index={1} spacing={spacing}>\n                    Item Two\n                </TabPanel>\n            </SwipeableViews>\n        </div>\n    );\n});\n","import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nfunction ThreeContainer() {\n    const ref = useRef();\n\n    useEffect(() => {\n        const scene = new THREE.Scene();\n        const [width, height] = [\n            ref.current.parentElement.clientWidth,\n            ref.current.parentElement.clientHeight,\n        ];\n        const camera = new THREE.PerspectiveCamera(\n            75,\n            width / height,\n            0.1,\n            1000\n        );\n        const renderer = new THREE.WebGLRenderer();\n        renderer.domElement.style.display = 'block';\n        renderer.setSize(width, height);\n        // document.body.appendChild( renderer.domElement );\n        // use ref as a mount point of the Three.js scene instead of the document.body\n        ref.current.appendChild(renderer.domElement);\n        const geometry = new THREE.BoxGeometry(1, 1, 1);\n        const material = new THREE.MeshNormalMaterial();\n        const cube = new THREE.Mesh(geometry, material);\n        scene.add(cube);\n        camera.position.z = 5;\n        const animate = function() {\n            requestAnimationFrame(animate);\n            cube.rotation.x += 0.01;\n            cube.rotation.y += 0.01;\n            renderer.render(scene, camera);\n        };\n        animate();\n\n        function handleResize() {\n            if (!ref || !ref.current || !ref.current.parentElement) {\n                return;\n            }\n\n            const { clientWidth, clientHeight } = ref.current.parentElement;\n            camera.aspect = clientWidth / clientHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(clientWidth, clientHeight);\n        }\n\n        window.addEventListener('resize', handleResize, false);\n        handleResize();\n\n        // Cleanup event handlers on unmount\n        return function cleanup() {\n            window.removeEventListener('resize', handleResize);\n        };\n    }, []);\n\n    return <div style={{ position: 'absolute' }} ref={ref} />;\n}\n\nexport default ThreeContainer;\n","// Library imports\nimport React, { useState } from 'react';\n// Project imports\nimport {\n    DragLayer,\n    ControlPanel,\n    Navbar,\n    SidePanel,\n    SplitScreen,\n} from 'components';\nimport ThreeContainer from './ThreeContainer';\n// UI imports\nimport { makeStyles } from '@material-ui/core/styles';\n\n// Styling for App wrapper\nconst appStyles = makeStyles(() => ({\n    // Wrapper spanning the height of the browser\n    fullHeight: {\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100vh',\n    },\n    // Ensure content below navbar stretches to bottom of the screen\n    stretchToBottom: {\n        flexGrow: 1,\n    },\n}));\n\n// The root component of the project\nexport default function App() {\n    // CSS classes for styling\n    const classes = appStyles();\n\n    // Visibility states for columns\n    const [showViz, setViz] = useState(true);\n    const [showControl, setControl] = useState(true);\n    const [showSide, setSide] = useState(true);\n\n    // Compute the number of active panels\n    let activePanelCount = 0;\n    if (showViz) {\n        activePanelCount += 1;\n    }\n    if (showControl) {\n        activePanelCount += 1;\n    }\n    if (showSide) {\n        activePanelCount += 1;\n    }\n\n    // We cannot disable any more panels when there is only one left\n    const canDisablePanels = activePanelCount > 1;\n\n    // Function to ensure there is always one panel active\n    const setStateFilter = (state, setState) => {\n        if (state || canDisablePanels) {\n            setState(state);\n        }\n    };\n\n    // setState functions wrapped in the filter\n    const toggleViz = (state) => setStateFilter(state, setViz);\n    const toggleControl = (state) => setStateFilter(state, setControl);\n    const toggleSide = (state) => setStateFilter(state, setSide);\n\n    // Render three panels: Visualization | Control | Side\n    return (\n        <div className={classes.fullHeight}>\n            <Navbar\n                showViz={showViz}\n                showControl={showControl}\n                showSide={showSide}\n                setViz={toggleViz}\n                setControl={toggleControl}\n                setSide={toggleSide}\n                canDisablePanels={canDisablePanels}\n            />\n            <div className={classes.stretchToBottom}>\n                <SplitScreen\n                    emptyMessage={`Hmmm...   it looks like something went wrong!\n                        Use Navbar to toggle a panel back into view :P`}\n                >\n                    <ThreeContainer\n                        splitScreenIsHidden={!showViz}\n                        splitScreenSetState={toggleViz}\n                        splitScreenMinShrink={0}\n                    />\n                    <ControlPanel\n                        splitScreenIsHidden={!showControl}\n                        splitScreenSetState={toggleControl}\n                        splitScreenMinShrink={0}\n                    />\n                    <SidePanel\n                        splitScreenIsHidden={!showSide}\n                        splitScreenSetState={toggleSide}\n                        splitScreenBehavior='fixed'\n                        splitScreenMinShrink={200}\n                    />\n                </SplitScreen>\n            </div>\n            <DragLayer />\n        </div>\n    );\n}\n","// UI imports\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#7e57c2',\n        },\n        secondary: {\n            main: '#f58025',\n        },\n        background: {\n            default: '#333333',\n        },\n        contrastThreshold: 2,\n    },\n});\n\nexport default theme;\n","// Library imports\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as StoreProvider } from 'react-redux';\n// Project imports\nimport App from './App';\nimport { theme } from './theme';\nimport { store } from 'flux';\n// UI imports\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\n// Base of the Create React App; wraps the project in a MUI theme\nReactDOM.render(\n    <StoreProvider store={store}>\n        <ThemeProvider theme={theme}>\n            {/* CssBaseline standardizes CSS */}\n            <CssBaseline />\n            <App />\n        </ThemeProvider>\n    </StoreProvider>,\n    document.querySelector('#root')\n);\n"],"sourceRoot":""}