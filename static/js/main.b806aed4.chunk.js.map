{"version":3,"sources":["components/common/containers/TabPanel/TabPanel.js","components/common/icons/SitemapOutline/SitemapOutline.js","components/interface/layout/Navbar/Navbar.js","utils/redux_utils.js","utils/web_utils.js","components/interface/layout/SplitScreen/SplitScreen.js","flux/state/user_interface/config.js","flux/state/user_interface/sidePanel/config.js","flux/state/config.js","flux/state/user_interface/sidePanel/sidePanel.js","flux/state/user_interface/user_interface.js","flux/state/state.js","flux/flux.js","components/interface/panels/SidePanel/SidePanel.js","ThreeContainer.js","App.js","theme/theme.js","index.js"],"names":["TabPanel","children","value","index","spacing","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","SitemapOutline","SvgIcon","d","navStyles","makeStyles","root","flexGrow","title","Navbar","showViz","showControl","showSide","setViz","setControl","setSide","canDisablePanels","classes","titleTooltip","state","name","className","AppBar","position","Toolbar","variant","Tooltip","IconButton","onClick","aria-label","disabled","edge","combineReducersAndActionCreators","statelets","reduce","statelet","prevReducers","prevActionCreators","propertyName","reducer","actionCreators","actions","allReducers","allActionCreators","combineReducers","useActions","deps","dispatch","useDispatch","useMemo","Array","isArray","map","a","bindActionCreators","computeWindowWidth","window","innerWidth","document","documentElement","body","clientWidth","DIV_WIDTH","splitScreenStyles","theme","display","height","cursor","divider","width","flex","backgroundColor","palette","type","grey","secondary","main","boxShadow","shadows","screenWrapperFluid","flexShrink","flexBasis","overflow","screenWrapperFixed","screenWrapperHidden","noScreens","alignItems","justifyContent","textAlign","computeScreenWidths","refs","ref","current","setScreenWidths","screenWidths","resizeBehaviors","isRefresh","fixedOnly","triggeredReflow","forEach","i","isVisible","isFixed","newWidth","style","newFlex","toFixed","oldFlex","parseFloat","widthCache","totalFluidPixels","j","Math","max","computeMinWidths","winWidth","totalFixedPixels","minShrink","fixedScaleFactor","SplitScreen","emptyMessage","screens","React","Children","toArray","props","splitScreenIsHidden","setState","splitScreenSetState","splitScreenBehavior","splitScreenMinShrink","resizeBehaviorSignature","JSON","stringify","screenRefs","useRef","createRef","useState","activeSlider","setActiveSlider","useEffect","minWidths","addEventListener","handleMouseMove","handleMouseUp","removeEventListener","e","targetX","clientX","currentX","prevPane","nextPane","length","delta","totalChange","fixedPercentages","dispatchEvent","Event","isFluidCompressed","isPaneVisible","clsx","screen","screenProps","Object","assign","key","createElement","onMouseDown","preventDefault","onMouseUp","Container","maxWidth","my","initialState","user_interface","sidePanel","activeTabIndex","SET_TAB_INDEX","action","payload","setSidePanelTabIndex","tabIndex","rootReducer","store","createStore","accessibilityProps","sidePanelStyles","flexDirection","minWidth","panelTabs","panelBody","overflowY","tabButton","memo","layout","setLayout","handleResize","useSelector","activeIndex","setActiveIndex","color","Tabs","onChange","event","newValue","indicatorColor","textColor","Tab","label","icon","axis","onChangeIndex","Card","ThreeContainer","scene","THREE","parentElement","clientHeight","camera","renderer","setSize","appendChild","domElement","geometry","material","cube","add","z","aspect","updateProjectionMatrix","animate","requestAnimationFrame","rotation","x","y","render","appStyles","fullHeight","stretchToBottom","createMuiTheme","primary","background","default","contrastThreshold","ReactDOM","ThemeProvider","CssBaseline","activePanelCount","setStateFilter","toggleViz","toggleControl","toggleSide","gutterBottom","querySelector"],"mappings":"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","file":"static/js/main.b806aed4.chunk.js","sourcesContent":["// Library imports\nimport React from 'react';\n// UI imports\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\n// TabPanel wraps the content that appears under a tabbed component\nexport default function TabPanel({\n    children,\n    value,\n    index,\n    spacing,\n    ...other\n}) {\n    return (\n        <Typography\n            component='div'\n            role='tabpanel'\n            hidden={value !== index}\n            id={`side-tabpanel-${index}`}\n            aria-labelledby={`side-panel-tab-${index}`}\n            {...other}\n        >\n            <Box p={spacing}>{value === index && children}</Box>\n        </Typography>\n    );\n}\n","// Library imports\nimport React from 'react';\n// UI imports\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\n// A custom svg that serves as an outline variant of mdi-material-ui's Sitemap\nexport default function SitemapOutline() {\n    return (\n        <SvgIcon>\n            <path d='m9 2v6h6v-6h-6zm2 2h2v2h-2v-2z' />\n            <path d='m17 16v6h6v-6h-2.5-1-2.5zm2 2h2v2h-2v-2z' />\n            <path d='m9 16v6h6v-6h-6zm2 2h2v2h-2v-2z' />\n            <path d='m1 16v6h6v-6h-6zm2 2h2v2h-2v-2z' />\n            <g>\n                <path d='m11 8v2h2v-2z' />\n                <path d='m19 14v2h2v-2z' />\n                <path d='m14 11v2h2v-2z' />\n                <path d='m11 14v2h2v-2z' />\n                <path d='m8 11v2h2v-2z' />\n                <path d='m3 14v2h2v-2z' />\n                <path d='m17 11v2h2v-2z' />\n                <path d='m5 11v2h2v-2z' />\n                <path d='m11 11v2h2v-2z' />\n            </g>\n        </SvgIcon>\n    );\n}\n","// Library imports\nimport React from 'react';\n// UI imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CubeFilledIcon from 'mdi-material-ui/Cube';\nimport CubeOutlineIcon from 'mdi-material-ui/CubeOutline';\nimport SitemapFilledIcon from 'mdi-material-ui/Sitemap';\nimport { SitemapOutline as SitemapOutlineIcon } from 'components';\nimport WrenchFilledIcon from 'mdi-material-ui/Wrench';\nimport WrenchOutlineIcon from 'mdi-material-ui/WrenchOutline';\n\n// Styling for Navbar\nconst navStyles = makeStyles(() => ({\n    // Fixed height navbar\n    root: {\n        flexGrow: 0,\n    },\n    // Fill space between title and control buttons\n    title: {\n        flexGrow: 1,\n    },\n}));\n\n// Renders a Navbar across the top of the screen; contains a few simple controls.\nexport default function Navbar({\n    showViz,\n    showControl,\n    showSide,\n    setViz,\n    setControl,\n    setSide,\n    canDisablePanels,\n}) {\n    // CSS classes for styling\n    const classes = navStyles();\n\n    // Format tool tip strings\n    const titleTooltip = (state, name) => {\n        if (state) {\n            return `Hide ${name}`;\n        } else {\n            return `Show ${name}`;\n        }\n    };\n\n    // Render the Navbar and buttons\n    return (\n        <div className={classes.root}>\n            <AppBar position='static'>\n                <Toolbar>\n                    <Typography variant='h6' className={classes.title}>\n                        {'TigerJS'}\n                    </Typography>\n                    <Tooltip title={titleTooltip(showViz, 'Visualization')}>\n                        <IconButton\n                            onClick={() => setViz(!showViz)}\n                            aria-label='toggle-visualization-panel'\n                            disabled={showViz && !canDisablePanels}\n                        >\n                            {showViz ? <CubeFilledIcon /> : <CubeOutlineIcon />}\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title={titleTooltip(showControl, 'Control Panel')}>\n                        <IconButton\n                            onClick={() => setControl(!showControl)}\n                            aria-label='toggle-control-panel'\n                            disabled={showControl && !canDisablePanels}\n                        >\n                            {showControl ? (\n                                <SitemapFilledIcon />\n                            ) : (\n                                <SitemapOutlineIcon />\n                            )}\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title={titleTooltip(showSide, 'Side Panel')}>\n                        <IconButton\n                            onClick={() => setSide(!showSide)}\n                            aria-label='toggle-side-panel'\n                            disabled={showSide && !canDisablePanels}\n                            edge='end'\n                        >\n                            {showSide ? (\n                                <WrenchFilledIcon />\n                            ) : (\n                                <WrenchOutlineIcon />\n                            )}\n                        </IconButton>\n                    </Tooltip>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","// Library imports\nimport { useMemo } from 'react';\nimport { bindActionCreators, combineReducers } from 'redux';\nimport { useDispatch } from 'react-redux';\n\n/*\n * Merge an array of modules each of the form { propertyName, reducer, ...actions}\n * into a single set of (combined) reducers and actionCreators.\n */\nexport const combineReducersAndActionCreators = (statelets) => {\n    // Merge the reducers and actionCreators into one object and one list, respectively\n    const [allReducers, allActionCreators] = statelets.reduce(\n        ([prevReducers, prevActionCreators], statelet) => {\n            // Extract properties from the statelet\n            const {\n                propertyName,\n                reducer,\n                actionCreators,\n                ...actions\n            } = statelet;\n\n            // Merge the reducer, giving it the key defined by ${propertyName}.\n            const nextReducers = { ...prevReducers, [propertyName]: reducer };\n\n            // Merge the actions via a simple spread\n            const nextActionCreators = {\n                ...prevActionCreators,\n                ...actionCreators,\n                ...actions,\n            };\n\n            return [nextReducers, nextActionCreators];\n        },\n        [{}, {}]\n    );\n\n    // Combine the reducers via redux\n    const reducer = combineReducers(allReducers);\n\n    // Return the combined reducer and the list of actions\n    return [reducer, allActionCreators];\n};\n\n/*\n * A react hook that returns action creators bound to the dispatch\n */\nexport function useActions(actions, deps) {\n    const dispatch = useDispatch();\n    return useMemo(\n        () => {\n            if (Array.isArray(actions)) {\n                return actions.map((a) => bindActionCreators(a, dispatch));\n            }\n            return bindActionCreators(actions, dispatch);\n        },\n        // eslint-disable-next-line\n        deps ? [dispatch, ...deps] : [dispatch]\n    );\n}\n","// Return the width of the browser window\nexport const computeWindowWidth = () => {\n    return (\n        window.innerWidth ||\n        (document.documentElement || document.body).clientWidth\n    );\n};\n","// Libary imports\nimport React, { Fragment, createRef, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\n// Project imports\nimport { computeWindowWidth } from 'utils';\n// UI imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\n// Constant that defines column divider width\nconst DIV_WIDTH = 3;\n\n// Styling for the split screen component\nconst splitScreenStyles = makeStyles((theme) => ({\n    // Wrapper for the split screen\n    root: {\n        display: 'flex',\n        position: 'relative',\n        height: '100%',\n        '&.resizing': {\n            cursor: 'col-resize',\n        },\n    },\n    // Divider between the screens\n    divider: {\n        width: DIV_WIDTH,\n        flex: 'initial',\n        backgroundColor:\n            theme.palette.type === 'light'\n                ? theme.palette.grey[100]\n                : theme.palette.grey[900],\n        cursor: 'col-resize',\n        '&:hover:not(.inActive), &.active': {\n            backgroundColor: theme.palette.secondary.main,\n        },\n        boxShadow: theme.shadows[3],\n    },\n    // Wrapper for screens that stretch as the window grows\n    screenWrapperFluid: {\n        position: 'relative',\n        flexGrow: 1,\n        flexShrink: 1,\n        flexBasis: '0%',\n        overflow: 'scroll',\n    },\n    // Wrapper for screens that do not stretch as the window grows\n    screenWrapperFixed: {\n        position: 'relative',\n        flex: 'initial',\n        overflow: 'scroll',\n    },\n    // Wrapper for hidden/disabled screens\n    screenWrapperHidden: {\n        display: 'none',\n    },\n    // Wrapper for message when there are no screens\n    noScreens: {\n        alignItems: 'center',\n        display: 'flex',\n        justifyContent: 'center',\n        textAlign: 'center',\n    },\n}));\n\n// Measure the visible width of each screen and return the widths as an array\nconst computeScreenWidths = (refs) => {\n    return refs.map((ref) => {\n        if (!ref || !ref.current) {\n            return 0;\n        } else {\n            return ref.current.clientWidth;\n        }\n    });\n};\n\n// Apply the screen widths directly to the DOM's CSS\nconst setScreenWidths = (\n    refs,\n    screenWidths,\n    resizeBehaviors,\n    isRefresh,\n    fixedOnly\n) => {\n    // Boolean to keep track if we need to rerender or not\n    let triggeredReflow = false;\n\n    // For each screen...\n    refs.forEach((ref, i) => {\n        if (!ref || !ref.current) {\n            // \"Continue\"\n            return;\n        } else if (resizeBehaviors[i].isVisible) {\n            if (resizeBehaviors[i].isFixed) {\n                // If visible and FIXED\n                const newWidth = fixedOnly\n                    ? `${screenWidths[i]}%`\n                    : `${screenWidths[i]}px`;\n                // Only rerender if necessary\n                if (ref.current.style.width !== newWidth) {\n                    ref.current.style.width = newWidth;\n                    triggeredReflow = true;\n                }\n            } else {\n                // If visible and FLUID\n                const newFlex = screenWidths[i].toFixed(1);\n                const oldFlex = parseFloat(ref.current.style.flexGrow).toFixed(\n                    1\n                );\n                const widthCache = ref.current.widthCache;\n\n                // Only rerender if necessary\n                if (\n                    oldFlex !== newFlex &&\n                    (oldFlex > 0 || screenWidths[i] > 0)\n                ) {\n                    // Normal case, where flexGrow = pixel width\n                    ref.current.style.flexGrow = newFlex;\n                    triggeredReflow = true;\n\n                    if (widthCache) {\n                        delete ref.current.widthCache;\n                    }\n                } else if (widthCache && isRefresh) {\n                    // This screen was just hidden; need to adjust its size\n                    let totalFluidPixels = 0;\n                    screenWidths.forEach((width, j) => {\n                        if (!resizeBehaviors[j].isFixed && j !== i) {\n                            totalFluidPixels += width;\n                        }\n                    });\n                    if (totalFluidPixels <= 0) {\n                        // This is the only fluid screen, so it can be large\n                        ref.current.style.flexGrow = computeWindowWidth();\n                    } else if (widthCache >= 1) {\n                        // There was the last fluid screen so it can be anything\n                        ref.current.style.flexGrow = totalFluidPixels;\n                    } else {\n                        /*\n                         * Maintain the percentage of fluid pixels this screen\n                         * used before it disappeared: ratio = me/(Total + me).\n                         *\n                         * Total = totalFluidPixels, ratio = widthCache.\n                         * Solve for me.\n                         */\n                        ref.current.style.flexGrow =\n                            (totalFluidPixels * widthCache) /\n                            (1.0 - widthCache);\n                    }\n                    triggeredReflow = true;\n                }\n            }\n        } else if (isRefresh) {\n            // This screen is invisible, BUT (any) visibility state just changed!\n            if (!resizeBehaviors[i].isFixed) {\n                // Cache the current width percentage if necessary\n                if (!ref.current.widthCache) {\n                    // Save normalized width\n                    let totalFluidPixels = 0;\n                    screenWidths.forEach((width, j) => {\n                        if (!resizeBehaviors[j].isFixed) {\n                            totalFluidPixels += width;\n                        }\n                    });\n                    totalFluidPixels -= DIV_WIDTH;\n\n                    if (totalFluidPixels <= 0) {\n                        ref.current.widthCache = 1;\n                    } else {\n                        ref.current.widthCache = Math.max(\n                            0.15,\n                            ref.current.style.flexGrow / totalFluidPixels\n                        );\n                    }\n                }\n                ref.current.style.flexGrow = 0;\n            }\n        }\n    });\n\n    return triggeredReflow;\n};\n\n// Compute the minimum pixel widths allowable for each screen given window width\nconst computeMinWidths = (resizeBehaviors, winWidth) => {\n    // First count total space taken up by minimum widths\n    let totalFixedPixels = 0;\n    for (const { isFixed, minShrink } of resizeBehaviors) {\n        if (isFixed) {\n            totalFixedPixels += minShrink;\n        } else {\n            totalFixedPixels += minShrink * winWidth;\n        }\n    }\n\n    // If we have too much fixed space allocated, need to scale everything down\n    let fixedScaleFactor = 1.0;\n    if (totalFixedPixels > winWidth) {\n        fixedScaleFactor = winWidth / totalFixedPixels;\n        totalFixedPixels = winWidth;\n    }\n\n    // Compute and return minwidths\n    const totalFluidPixels = winWidth - totalFixedPixels;\n    return resizeBehaviors.map(({ isFixed, minShrink }) => {\n        if (isFixed) {\n            return minShrink * fixedScaleFactor;\n        } else {\n            return minShrink * totalFluidPixels;\n        }\n    });\n};\n\n// SplitScreen divides its children into resizable columns\nexport default function SplitScreen({ children, emptyMessage }) {\n    // CSS classes for styling\n    const classes = splitScreenStyles();\n\n    // Extract children into array of screens/views\n    const screens = React.Children.toArray(children);\n\n    // Determine resizing behavior from props\n    const resizeBehaviors = screens.map(({ props }) => {\n        // Fluid behavior with minWidth=0 by default\n        return {\n            isVisible: !(props.splitScreenIsHidden || false),\n            setState: props.splitScreenSetState || (() => {}),\n            isFixed: props.splitScreenBehavior === 'fixed',\n            minShrink: props.splitScreenMinShrink || 0,\n        };\n    });\n    const resizeBehaviorSignature = JSON.stringify(resizeBehaviors);\n\n    // Refs to keep track of screens (and set their CSS)\n    const screenRefs = useRef(screens.map(() => createRef()));\n\n    // activeSlider is index of the slider being dragged by the user. -1 if none\n    const [activeSlider, setActiveSlider] = useState(-1);\n\n    // Effect for resizing columns on mousedrag\n    useEffect(() => {\n        // Corner cases (ref is bad or no active sliders)\n        if (!screenRefs.current || activeSlider < 0) {\n            return;\n        }\n\n        // Compute constants needed to determine\n        const winWidth = computeWindowWidth();\n        const screenWidths = computeScreenWidths(screenRefs.current);\n        const minWidths = computeMinWidths(resizeBehaviors, winWidth);\n\n        // Mouse move handler\n        function handleMouseMove(e) {\n            // Mouse position\n            const targetX = e.clientX;\n\n            /*\n             * Find the divider position, determine the adjacent panes, and\n             * check if at least one visible screen is fluid (i.e. not fixed)\n             */\n            let currentX = -DIV_WIDTH / 2.0;\n            let prevPane = 0;\n            let nextPane = screens.length - 1;\n            let fixedOnly = true;\n            for (let i = 0; i <= activeSlider; i++) {\n                if (resizeBehaviors[i].isVisible) {\n                    prevPane = i;\n                    currentX += screenWidths[i] + DIV_WIDTH;\n\n                    if (!resizeBehaviors[i].isFixed) {\n                        fixedOnly = false;\n                    }\n                }\n            }\n\n            for (let i = screens.length - 1; i > activeSlider; i--) {\n                if (resizeBehaviors[i].isVisible) {\n                    nextPane = i;\n\n                    if (!resizeBehaviors[i].isFixed) {\n                        fixedOnly = false;\n                    }\n                }\n            }\n\n            // Adjust screens accordingly\n            let delta = targetX - currentX;\n            if (delta > 0) {\n                // Mouse lies to the right of the divider\n                for (let i = activeSlider + 1; i < screens.length; i++) {\n                    if (resizeBehaviors[i].isVisible) {\n                        // Compute (clamped) exchange\n                        const newWidth = Math.max(\n                            minWidths[i],\n                            screenWidths[i] - delta\n                        );\n                        const totalChange = screenWidths[i] - newWidth;\n                        // Exchange width\n                        screenWidths[i] = newWidth;\n                        delta -= totalChange;\n                        screenWidths[prevPane] += totalChange;\n\n                        // Break when we hit the target\n                        if (delta <= 0) {\n                            break;\n                        }\n                    }\n                }\n            } else if (delta < 0) {\n                // Mouse lies to the left of the divider\n                delta = -delta; // Flip sign for readibility\n                for (let i = activeSlider; i >= 0; i--) {\n                    if (resizeBehaviors[i].isVisible) {\n                        // Compute (clamped) exchange\n                        const newWidth = Math.max(\n                            minWidths[i],\n                            screenWidths[i] - delta\n                        );\n                        const totalChange = screenWidths[i] - newWidth;\n                        // Exchange width\n                        screenWidths[i] = newWidth;\n                        delta -= totalChange;\n                        screenWidths[nextPane] += totalChange;\n\n                        // Break when we hit the target\n                        if (delta <= 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n\n            let triggeredReflow = false;\n            if (!fixedOnly) {\n                // Apply new widths to DOM\n                triggeredReflow = setScreenWidths(\n                    screenRefs.current,\n                    screenWidths,\n                    resizeBehaviors,\n                    false,\n                    false\n                );\n            } else {\n                // If all screens are fixed, need to rescale to percentages\n                const fixedPercentages = screenWidths.map((width, i) => {\n                    if (\n                        resizeBehaviors[i].isVisible &&\n                        resizeBehaviors[i].isFixed\n                    ) {\n                        return (width / winWidth) * 100.0;\n                    } else {\n                        return width;\n                    }\n                });\n\n                // Apply new percentages to DOM\n                triggeredReflow = setScreenWidths(\n                    screenRefs.current,\n                    fixedPercentages,\n                    resizeBehaviors,\n                    false,\n                    true\n                );\n            }\n\n            /*\n             * If triggeredReflow is true, we adjust a column; let children know\n             * their size changed by sending a window resize event\n             */\n            if (triggeredReflow) {\n                window.dispatchEvent(new Event('resize'));\n            }\n        }\n\n        // Mouse up handler\n        function handleMouseUp() {\n            // Hide any panels with no width\n            screenWidths.forEach((width, i) => {\n                if (width <= 0 && resizeBehaviors[i].isVisible) {\n                    resizeBehaviors[i].setState(false);\n                }\n            });\n            // Disable the (released) slider\n            setActiveSlider(-1);\n        }\n\n        window.addEventListener('mousemove', handleMouseMove, false);\n        window.addEventListener('mouseup', handleMouseUp, false);\n\n        // Cleanup event handlers on unmount\n        return function cleanup() {\n            window.removeEventListener('mousemove', handleMouseMove);\n            window.removeEventListener('mouseup', handleMouseUp);\n        };\n        // eslint-disable-next-line\n    }, [activeSlider, screens.length, resizeBehaviorSignature]);\n\n    // Effect to ensure proper formatting on init and after visibility change\n    useEffect(() => {\n        // Corner case (ref is bad)\n        if (!screenRefs.current) {\n            return;\n        }\n\n        // Measure width of screens\n        let screenWidths = computeScreenWidths(screenRefs.current);\n\n        /*\n         * Determine how much of the window is taken up by the fixed screens.\n         * Also, check if there are any visible fluid screens (i.e. not fixed)\n         * at all.\n         */\n        const winWidth = computeWindowWidth();\n        let totalFixedPixels = 0;\n        let fixedOnly = true;\n        screenWidths.forEach((width, i) => {\n            if (resizeBehaviors[i].isFixed) {\n                totalFixedPixels += width;\n            } else if (resizeBehaviors[i].isVisible) {\n                fixedOnly = false;\n            }\n        });\n\n        /*\n         * If there is too much fixed space allocated, fixed screens must be\n         * scaled down. If all screens are fixed, fixed screens must be scaled\n         * exactly to the width of the screen. If fixed screens would eat up all\n         * the space of fluid screens, reallocate 10% of the window for the fluid\n         * screens.\n         */\n        let fixedScaleFactor = 1.0;\n        let isFluidCompressed = false;\n        if (totalFixedPixels > winWidth || fixedOnly) {\n            fixedScaleFactor = winWidth / totalFixedPixels;\n        } else if (totalFixedPixels > winWidth * 0.9) {\n            fixedScaleFactor = (winWidth * 0.9) / totalFixedPixels;\n\n            // Make a note that the fluid screens were compressed\n            isFluidCompressed = true;\n        }\n\n        // Adjust the screen widths accordingly\n        screenWidths = screenWidths.map((width, i) => {\n            if (resizeBehaviors[i].isVisible) {\n                if (resizeBehaviors[i].isFixed) {\n                    // Rescale fixed divs\n                    if (fixedOnly) {\n                        // Fixed divs use percentage widths\n                        return ((width * fixedScaleFactor) / winWidth) * 100;\n                    } else {\n                        return width * fixedScaleFactor;\n                    }\n                } else if (\n                    isFluidCompressed &&\n                    width === 0 &&\n                    !screenRefs.current[i].current.widthCache\n                ) {\n                    // These screens were compressed to zero, so rescale up\n                    return winWidth;\n                }\n            }\n\n            // Use precomputed width by default\n            return width;\n        });\n\n        // Apply new screen widths\n        setScreenWidths(\n            screenRefs.current,\n            screenWidths,\n            resizeBehaviors,\n            true,\n            fixedOnly\n        );\n\n        // Refresh with second pass if necessary\n        if (!fixedOnly) {\n            screenWidths = computeScreenWidths(screenRefs.current);\n            setScreenWidths(\n                screenRefs.current,\n                screenWidths,\n                resizeBehaviors,\n                false,\n                fixedOnly\n            );\n        }\n\n        // Trigger a window resize event\n        window.dispatchEvent(new Event('resize'));\n\n        // eslint-disable-next-line\n    }, [resizeBehaviorSignature]);\n\n    // isPaneVisible is true if and only if at least one screen is visible\n    let isPaneVisible = false;\n    return (\n        <div className={clsx(classes.root, activeSlider > -1 && 'resizing')}>\n            {screens.map((screen, i) => {\n                // Safely remove splitScreen props from children\n                const screenProps = Object.assign({}, screen.props);\n                delete screenProps.splitScreenIsHidden;\n                delete screenProps.splitScreenSetState;\n                delete screenProps.splitScreenBehavior;\n                delete screenProps.splitScreenMinShrink;\n\n                // Record if this pane is visible\n                if (resizeBehaviors[i].isVisible) {\n                    isPaneVisible = true;\n                }\n\n                // Render this screen\n                return (\n                    <Fragment key={screen.key}>\n                        <div\n                            ref={screenRefs.current[i]}\n                            className={clsx(\n                                resizeBehaviors[i].isFixed\n                                    ? classes.screenWrapperFixed\n                                    : classes.screenWrapperFluid,\n                                !resizeBehaviors[i].isVisible &&\n                                    classes.screenWrapperHidden\n                            )}\n                        >\n                            {resizeBehaviors[i].isVisible &&\n                                React.createElement(screen.type, screenProps)}\n                        </div>\n                        {i < screens.length - 1 &&\n                            resizeBehaviors[i + 1].isVisible &&\n                            isPaneVisible && (\n                                <div\n                                    onMouseDown={(e) => {\n                                        setActiveSlider(i);\n                                        e.preventDefault();\n                                    }}\n                                    onMouseUp={() => setActiveSlider(-1)}\n                                    className={clsx(\n                                        classes.divider,\n                                        activeSlider === i\n                                            ? 'active'\n                                            : activeSlider > -1 && 'inActive'\n                                    )}\n                                />\n                            )}\n                    </Fragment>\n                );\n            })}\n            {!isPaneVisible && (\n                <Container className={classes.noScreens} maxWidth='sm'>\n                    <Box my={4}>\n                        <Typography variant='h4' component='h1'>\n                            {emptyMessage}\n                        </Typography>\n                    </Box>\n                </Container>\n            )}\n        </div>\n    );\n}\n","// Local imports\nimport parentInitialState from '../config.js';\n\n// The name/key of this property\nexport const propertyName = 'user_interface';\n\n// Extract the local initial state, as defined by propertyName\nconst initialState = parentInitialState[propertyName] || {};\nexport default initialState;\n","// Local imports\nimport parentInitialState from '../config.js';\n\n// The name/key of this property\nexport const propertyName = 'sidePanel';\n\n// Extract the local initial state, as defined by propertyName\nconst initialState = parentInitialState[propertyName] || {};\nexport default initialState;\n","// The initial state of the system\nconst initialState = {\n    user_interface: {\n        sidePanel: {\n            activeTabIndex: 0,\n        },\n    },\n};\n\nexport default initialState;\n","// Local imports\nimport initialState from './config';\n\n// Actions\nconst SET_TAB_INDEX = 'interface/sidePanel/SET_TAB_INDEX';\n\n// Reducer\nexport function reducer(state = initialState, action = {}) {\n    switch (action.type) {\n        case SET_TAB_INDEX:\n            return { ...state, activeTabIndex: action.payload };\n        default:\n            return state;\n    }\n}\n\n// Action Creators\nexport function setSidePanelTabIndex(tabIndex) {\n    return { type: SET_TAB_INDEX, payload: tabIndex };\n}\n","// Project imports\nimport { combineReducersAndActionCreators } from 'utils';\n// Local imports\nimport * as sidePanel from './sidePanel';\n\n// Combine child states into a reducer and its associated actionCreators\nexport const [reducer, actionCreators] = combineReducersAndActionCreators([\n    sidePanel,\n]);\n","// Project imports\nimport { combineReducersAndActionCreators } from 'utils';\n// Local imports\nimport * as user_interface from './user_interface';\n\n// Combine child states into the rootReducer and an object containing all actionCreators\nexport const [rootReducer, actionCreators] = combineReducersAndActionCreators([\n    user_interface,\n]);\n","// Library imports\nimport { createStore } from 'redux';\n// Local imports\nimport { rootReducer } from './state';\n\n// Use redux to generate the store from the rootReducer\nexport const store = createStore(rootReducer);\n","// Library imports\nimport React, { useEffect, useRef, memo } from 'react';\nimport { useSelector } from 'react-redux';\nimport Draggable from 'react-draggable';\n// Project imports\nimport { TabPanel } from 'components';\nimport { actionCreators } from 'flux';\nimport { useActions } from 'utils';\n// UI imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Card from '@material-ui/core/Card';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport SwipeableViews from 'react-swipeable-views';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport ToolboxIcon from 'mdi-material-ui/Toolbox';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n// Extract relevant actionCreators\nconst { setSidePanelTabIndex } = actionCreators;\n\n// Computes the accessibility labels for the side panel\nfunction accessibilityProps(index) {\n    return {\n        id: `side-panel-tab-${index}`,\n        'aria-controls': `side-panel-tabpanel-${index}`,\n    };\n}\n\n// Styling for the side panel\nconst sidePanelStyles = makeStyles(() => ({\n    // Wrapper for the panel\n    root: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 200,\n    },\n    // panelTabs have fixed height\n    panelTabs: {\n        flexGrow: 0,\n    },\n    panelBody: {\n        position: 'relative',\n        flexGrow: 1,\n        '&>div': {\n            position: 'absolute',\n            overflowY: 'scroll',\n            height: '100%',\n            width: '100%',\n        },\n    },\n    // Allow for smaller buttons\n    tabButton: {\n        minWidth: 0,\n    },\n}));\n\n// Panel on the side of the screen to manage components and properties\nexport default memo(function SidePanel() {\n    // CSS classes for styling\n    const classes = sidePanelStyles();\n\n    // Layout is 1 if the panel is in wide mode; 0 if in narrow mode\n    const [layout, setLayout] = React.useState(0);\n\n    // Ref for tracking panel width\n    const ref = useRef();\n\n    // Effect for measuring panel width on resize\n    useEffect(() => {\n        // Resize handler\n        function handleResize() {\n            if (!ref || !ref.current) {\n                return;\n            }\n\n            if (ref.current.clientWidth > 350) {\n                // Wide layout\n                setLayout(1);\n            } else {\n                // Narrow layout\n                setLayout(0);\n            }\n        }\n\n        window.addEventListener('resize', handleResize, false);\n        handleResize();\n\n        // Cleanup event handlers on unmount\n        return function cleanup() {\n            window.removeEventListener('resize', handleResize);\n        };\n    }, []);\n\n    // Retrieve properties from the global state\n    const sidePanelFluxState = useSelector(\n        (state) => state.user_interface.sidePanel\n    );\n\n    // ActiveIndex is the index of the tab currently in view\n    const [activeIndex, setActiveIndex] = [\n        sidePanelFluxState.activeTabIndex,\n        useActions(setSidePanelTabIndex),\n    ];\n\n    // Helper function to set active tab on tab click\n    const handleChange = (event, newValue) => {\n        setActiveIndex(newValue);\n    };\n\n    // Helper function to set active tab on view swipe\n    const handleChangeIndex = (index) => {\n        setActiveIndex(index);\n    };\n\n    // Spacing passed to tab panels depends on layout\n    const spacing = layout ? 3 : 1;\n\n    // Render the side panel in a tabbed layout\n    return (\n        <div ref={ref} className={classes.root}>\n            <AppBar\n                className={classes.panelTabs}\n                component='div'\n                position='static'\n                color='default'\n            >\n                <Tabs\n                    value={activeIndex}\n                    onChange={handleChange}\n                    indicatorColor='primary'\n                    textColor='primary'\n                    variant='fullWidth'\n                    aria-label='side-panel'\n                >\n                    <Tooltip title={layout ? '' : 'Components'}>\n                        <Tab\n                            className={classes.tabButton}\n                            label={layout ? 'Components' : ''}\n                            icon={<ToolboxIcon />}\n                            {...accessibilityProps(0)}\n                        />\n                    </Tooltip>\n                    <Tooltip title={layout ? '' : 'Properties'}>\n                        <Tab\n                            className={classes.tabButton}\n                            label={layout ? 'Properties' : ''}\n                            icon={<TuneIcon />}\n                            {...accessibilityProps(1)}\n                        />\n                    </Tooltip>\n                </Tabs>\n            </AppBar>\n            <SwipeableViews\n                axis='x'\n                index={activeIndex}\n                onChangeIndex={handleChangeIndex}\n                className={classes.panelBody}\n            >\n                <TabPanel value={activeIndex} index={0} spacing={spacing}>\n                    <Draggable>\n                        <Card>Item One</Card>\n                    </Draggable>\n                </TabPanel>\n                <TabPanel value={activeIndex} index={1} spacing={spacing}>\n                    Item Two\n                </TabPanel>\n            </SwipeableViews>\n        </div>\n    );\n});\n","import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nfunction ThreeContainer() {\n    const ref = useRef();\n\n    useEffect(() => {\n        const scene = new THREE.Scene();\n        const [width, height] = [\n            ref.current.parentElement.clientWidth,\n            ref.current.parentElement.clientHeight,\n        ];\n        const camera = new THREE.PerspectiveCamera(\n            75,\n            width / height,\n            0.1,\n            1000\n        );\n        const renderer = new THREE.WebGLRenderer();\n        renderer.setSize(width, height);\n        // document.body.appendChild( renderer.domElement );\n        // use ref as a mount point of the Three.js scene instead of the document.body\n        ref.current.appendChild(renderer.domElement);\n        const geometry = new THREE.BoxGeometry(1, 1, 1);\n        const material = new THREE.MeshNormalMaterial();\n        const cube = new THREE.Mesh(geometry, material);\n        scene.add(cube);\n        camera.position.z = 5;\n        const animate = function() {\n            requestAnimationFrame(animate);\n            cube.rotation.x += 0.01;\n            cube.rotation.y += 0.01;\n            renderer.render(scene, camera);\n        };\n        animate();\n\n        function handleResize() {\n            if (!ref || !ref.current || !ref.current.parentElement) {\n                return;\n            }\n\n            const { clientWidth, clientHeight } = ref.current.parentElement;\n            camera.aspect = clientWidth / clientHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(clientWidth, clientHeight);\n        }\n\n        window.addEventListener('resize', handleResize, false);\n        handleResize();\n\n        // Cleanup event handlers on unmount\n        return function cleanup() {\n            window.removeEventListener('resize', handleResize);\n        };\n    }, []);\n\n    return <div style={{ position: 'absolute' }} ref={ref} />;\n}\n\nexport default ThreeContainer;\n","// Library imports\nimport React, { useState } from 'react';\n// Project imports\nimport { Navbar, SidePanel, SplitScreen } from 'components';\nimport ThreeContainer from './ThreeContainer';\n// UI imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\n// Styling for App wrapper\nconst appStyles = makeStyles(() => ({\n    // Wrapper spanning the height of the browser\n    fullHeight: {\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100vh',\n    },\n    // Ensure content below navbar stretches to bottom of the screen\n    stretchToBottom: {\n        flexGrow: 1,\n    },\n}));\n\n// The root component of the project\nexport default function App() {\n    // CSS classes for styling\n    const classes = appStyles();\n\n    // Visibility states for columns\n    const [showViz, setViz] = useState(true);\n    const [showControl, setControl] = useState(true);\n    const [showSide, setSide] = useState(true);\n\n    // Compute the number of active panels\n    let activePanelCount = 0;\n    if (showViz) {\n        activePanelCount += 1;\n    }\n    if (showControl) {\n        activePanelCount += 1;\n    }\n    if (showSide) {\n        activePanelCount += 1;\n    }\n\n    // We cannot disable any more panels when there is only one left\n    const canDisablePanels = activePanelCount > 1;\n\n    // Function to ensure there is always one panel active\n    const setStateFilter = (state, setState) => {\n        if (state || canDisablePanels) {\n            setState(state);\n        }\n    };\n\n    // setState functions wrapped in the filter\n    const toggleViz = (state) => setStateFilter(state, setViz);\n    const toggleControl = (state) => setStateFilter(state, setControl);\n    const toggleSide = (state) => setStateFilter(state, setSide);\n\n    // Render three panels: Visualization | Control | Side\n    return (\n        <div className={classes.fullHeight}>\n            <Navbar\n                showViz={showViz}\n                showControl={showControl}\n                showSide={showSide}\n                setViz={toggleViz}\n                setControl={toggleControl}\n                setSide={toggleSide}\n                canDisablePanels={canDisablePanels}\n            />\n            <div className={classes.stretchToBottom}>\n                <SplitScreen\n                    emptyMessage={`Hmmm...   it looks like something went wrong!\n                        Use Navbar to toggle a panel back into view :P`}\n                >\n                    <ThreeContainer\n                        splitScreenIsHidden={!showViz}\n                        splitScreenSetState={toggleViz}\n                        splitScreenMinShrink={0}\n                    />\n                    <Container\n                        splitScreenIsHidden={!showControl}\n                        splitScreenSetState={toggleControl}\n                        splitScreenMinShrink={0}\n                        maxWidth='sm'\n                    >\n                        <Box my={4}>\n                            <Typography\n                                variant='h4'\n                                component='h1'\n                                gutterBottom\n                            >\n                                Flow Panel\n                            </Typography>\n                        </Box>\n                    </Container>\n                    <SidePanel\n                        splitScreenIsHidden={!showSide}\n                        splitScreenSetState={toggleSide}\n                        splitScreenBehavior='fixed'\n                        splitScreenMinShrink={200}\n                    />\n                </SplitScreen>\n            </div>\n        </div>\n    );\n}\n","// UI imports\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#7e57c2',\n        },\n        secondary: {\n            main: '#f58025',\n        },\n        background: {\n            default: '#333333',\n        },\n        contrastThreshold: 2,\n    },\n});\n\nexport default theme;\n","// Library imports\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as StoreProvider } from 'react-redux';\n// Project imports\nimport App from './App';\nimport { theme } from './theme';\nimport { store } from 'flux';\n// UI imports\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\n// Base of the Create React App; wraps the project in a MUI theme\nReactDOM.render(\n    <StoreProvider store={store}>\n        <ThemeProvider theme={theme}>\n            {/* CssBaseline standardizes CSS */}\n            <CssBaseline />\n            <App />\n        </ThemeProvider>\n    </StoreProvider>,\n    document.querySelector('#root')\n);\n"],"sourceRoot":""}